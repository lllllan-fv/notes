(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{1076:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("转载声明")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://javaguide.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaGuide"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://blog.csdn.net/lisulong1/article/details/52269262",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java序列化之排除被序列化字段(transient/静态变量"),n("OutboundLink")],1)])])]),t._v(" "),n("h2",{attrs:{id:"一、-反-序列化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、-反-序列化"}},[t._v("#")]),t._v(" 一、（反）序列化")]),t._v(" "),n("p",[t._v("理解序列化 -> "),n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/40462507",target:"_blank",rel:"noopener noreferrer"}},[t._v("序列化理解起来很简单"),n("OutboundLink")],1)]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("序列化")]),t._v("： 将数据结构或对象转换成二进制字节流的过程")]),t._v(" "),n("li",[n("strong",[t._v("反序列化")]),t._v("：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程")])]),t._v(" "),n("h3",{attrs:{id:"_1-1-为什么要序列化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-为什么要序列化"}},[t._v("#")]),t._v(" 1.1 为什么要序列化？")]),t._v(" "),n("blockquote",[n("p",[t._v("序列化最终的目的是为了对象可以"),n("strong",[t._v("跨平台存储，和进行网络传输")]),t._v("。")])]),t._v(" "),n("p",[t._v("我们进行跨平台存储和网络传输的方式就是IO，而我们的IO支持的数据格式就是字节数组。")]),t._v(" "),n("p",[t._v("因为我们单方面的只把对象转成字节数组还不行，因为没有规则的字节数组我们是没办法把对象的本来面目还原回来的，所以我们必须在把对象转成字节数组的时候就制定一种规则 "),n("strong",[t._v("（序列化）")]),t._v("，那么我们从IO流里面读出数据的时候再以这种规则把对象还原回来 "),n("strong",[t._v("（反序列化）")])]),t._v(" "),n("p",[t._v("如果我们要把一栋房子从一个地方运输到另一个地方去，"),n("strong",[t._v("序列化")]),t._v("就是我把房子拆成一个个的砖块放到车子里，然后留下一张房子原来结构的图纸，"),n("strong",[t._v("反序列化")]),t._v("就是我们把房子运输到了目的地以后，根据图纸把一块块砖头还原成房子原来面目的过程")]),t._v(" "),n("h3",{attrs:{id:"_1-2-什么时候需要序列化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-什么时候需要序列化"}},[t._v("#")]),t._v(" 1.2 什么时候需要序列化？")]),t._v(" "),n("p",[t._v("凡是需要进行“跨平台存储”和”网络传输”的数据，都需要进行序列化。")]),t._v(" "),n("p",[t._v("本质上存储和网络传输 都需要经过 把一个对象状态保存成一种跨平台识别的字节格式，然后其他的平台才可以通过字节信息解析还原对象信息。")]),t._v(" "),n("h2",{attrs:{id:"二、如果有些字段不想进行序列化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、如果有些字段不想进行序列化"}},[t._v("#")]),t._v(" 二、如果有些字段不想进行序列化")]),t._v(" "),n("p",[t._v("参考 "),n("a",{attrs:{href:"https://blog.csdn.net/lisulong1/article/details/52269262",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java序列化之排除被序列化字段(transient/静态变量"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("我们都知道一个对象只要实现了Serilizable接口，这个对象就可以被序列化，java的这种序列化模式为开发者提供了很多便利，我们可以不必关系具体序列化的过程，只要这个类实现了Serilizable接口，这个类的所有属性和方法都会自动序列化。")]),t._v(" "),n("p",[t._v("然而在实际开发过程中，我们常常会遇到这样的问题，这个类的有些属性需要序列化，而其他属性不需要被序列化，打个比方，"),n("strong",[t._v("如果一个用户有一些敏感信息（如密码，银行卡号等），为了安全起见，不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输")]),t._v("，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。")]),t._v(" "),n("p",[t._v("总之，java 的transient关键字为我们提供了便利，你只需要实现Serilizable接口，将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。")]),t._v(" "),n("p",[t._v("对于不想进行序列化的变量，使用 "),n("code",[t._v("transient")]),t._v(" 关键字修饰。")]),t._v(" "),n("p",[t._v("transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化 时，被 transient 修饰的变量值不会被持久化和恢复。transient 只能修饰变量，不能修饰类和方 法。")]),t._v(" "),n("h2",{attrs:{id:"三、获取用键盘输入常用的两种方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、获取用键盘输入常用的两种方法"}},[t._v("#")]),t._v(" 三、获取用键盘输入常用的两种方法")]),t._v(" "),n("ol",[n("li",[n("code",[t._v("Scanner")])])]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),t._v(" input "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s  "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" input"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextLine")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninput"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[n("code",[t._v("BufferedReader")])])]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedReader")]),t._v(" input "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedReader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStreamReader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" input"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("readLine")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("h2",{attrs:{id:"四、io流分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、io流分类"}},[t._v("#")]),t._v(" 四、IO流分类")]),t._v(" "),n("ul",[n("li",[t._v("按照流的流向分，可以分为输入流和输出流；")]),t._v(" "),n("li",[t._v("按照操作单元划分，可以划分为字节流和字符流；")]),t._v(" "),n("li",[t._v("按照流的角色划分为节点流和处理流（"),n("strong",[t._v("对一个已存在的流的连接和封装，通过所封装的流的功能调用实现数据读写")]),t._v("）。")])]),t._v(" "),n("p",[n("img",{attrs:{src:s(869),alt:"IO-操作方式分类",loading:"lazy"}})]),t._v(" "),n("p",[n("img",{attrs:{src:s(870),alt:"IO-操作对象分类",loading:"lazy"}})]),t._v(" "),n("h2",{attrs:{id:"五、字符流的意义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、字符流的意义"}},[t._v("#")]),t._v(" 五、字符流的意义")]),t._v(" "),n("p",[n("strong",[t._v("不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？")])]),t._v(" "),n("p",[t._v("字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。")])])}),[],!1,null,null,null);a.default=e.exports},869:function(t,a,s){t.exports=s.p+"assets/img/IO-操作方式分类.97167675.png"},870:function(t,a,s){t.exports=s.p+"assets/img/IO-操作对象分类.31a17a45.png"}}]);