(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{1074:function(t,a,e){"use strict";e.r(a);var s=e(1),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("转载声明")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://javaguide.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaGuide"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/ThinkVenus/p/6805495.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么是java OOM？如何分析及解决oom问题？"),s("OutboundLink")],1)])])]),t._v(" "),s("h2",{attrs:{id:"一、异常类层次结构图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、异常类层次结构图"}},[t._v("#")]),t._v(" 一、异常类层次结构图")]),t._v(" "),s("p",[t._v("在 Java 中，所有的异常都有一个共同的祖先 "),s("code",[t._v("java.lang")]),t._v(" 包中的 "),s("code",[t._v("Throwable")]),t._v(" 类。"),s("code",[t._v("Throwable")]),t._v(" 类有两个重要的子类 "),s("code",[t._v("Exception")]),t._v("（异常）和 "),s("code",[t._v("Error")]),t._v("（错误）。"),s("code",[t._v("Exception")]),t._v(" 能被程序本身处理("),s("code",[t._v("try-catch")]),t._v(")， "),s("code",[t._v("Error")]),t._v(" 是无法处理的(只能尽量避免)。")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[s("code",[t._v("Exception")])]),t._v(" ：程序本身可以处理的异常，可以通过 "),s("code",[t._v("catch")]),t._v(" 来进行捕获。"),s("code",[t._v("Exception")]),t._v(" 又可以分为 "),s("strong",[t._v("受检查异常")]),t._v("(必须处理) 和 "),s("strong",[t._v("不受检查异常")]),t._v("(可以不处理)。")])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("Error")])]),t._v(" ："),s("code",[t._v("Error")]),t._v(" 属于程序无法处理的错误 ，我们没办法通过 "),s("code",[t._v("catch")]),t._v(" 来进行捕获 。例如，Java 虚拟机运行错误（"),s("code",[t._v("Virtual MachineError")]),t._v("）、虚拟机内存不够错误("),s("code",[t._v("OutOfMemoryError")]),t._v(")、类定义错误（"),s("code",[t._v("NoClassDefFoundError")]),t._v("）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择"),s("strong",[t._v("线程终止")]),t._v("。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:e(866),alt:"img",loading:"lazy"}})]),t._v(" "),s("h3",{attrs:{id:"_1-1-受检查异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-受检查异常"}},[t._v("#")]),t._v(" 1.1 受检查异常")]),t._v(" "),s("p",[t._v("Java 代码在编译过程中，如果受检查异常没有被 "),s("code",[t._v("catch")]),t._v("/"),s("code",[t._v("throw")]),t._v(" 处理的话，就没办法通过编译 。比如下面这段 IO 操作的代码")]),t._v(" "),s("p",[s("code",[t._v("IOException")]),t._v("、"),s("code",[t._v("FileNotFoundException")]),t._v(" 、"),s("code",[t._v("SQLException")])]),t._v(" "),s("p",[s("img",{attrs:{src:e(867),alt:"image-20220304094533701",loading:"lazy"}})]),t._v(" "),s("h3",{attrs:{id:"_1-2-不受检查异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-不受检查异常"}},[t._v("#")]),t._v(" 1.2 不受检查异常")]),t._v(" "),s("p",[t._v("Java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。")]),t._v(" "),s("p",[s("code",[t._v("RuntimeException")]),t._v(" 及其子类都统称为非受检查异常，例如："),s("code",[t._v("NullPointerException")]),t._v("、"),s("code",[t._v("NumberFormatException")]),t._v("（字符串转换为数字）、"),s("code",[t._v("ArrayIndexOutOfBoundsException")]),t._v("（数组越界）、"),s("code",[t._v("ClassCastException")]),t._v("（类型转换错误）、"),s("code",[t._v("ArithmeticException")]),t._v("（算术错误）等。")]),t._v(" "),s("h2",{attrs:{id:"二、throwable-类常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、throwable-类常用方法"}},[t._v("#")]),t._v(" 二、Throwable 类常用方法")]),t._v(" "),s("ul",[s("li",[s("strong",[s("code",[t._v("public String getMessage()")])]),t._v(":返回异常发生时的简要描述")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("public String toString()")])]),t._v(":返回异常发生时的详细信息")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("public String getLocalizedMessage()")])]),t._v(":返回异常对象的本地化信息。使用 "),s("code",[t._v("Throwable")]),t._v(" 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 "),s("code",[t._v("getMessage()")]),t._v("返回的结果相同")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("public void printStackTrace()")])]),t._v(":在控制台上打印 "),s("code",[t._v("Throwable")]),t._v(" 对象封装的异常信息")])]),t._v(" "),s("h2",{attrs:{id:"三、try-catch-finally"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、try-catch-finally"}},[t._v("#")]),t._v(" 三、try-catch-finally")]),t._v(" "),s("ul",[s("li",[s("strong",[s("code",[t._v("try")]),t._v("块：")]),t._v(" 用于捕获异常。其后可接零个或多个 "),s("code",[t._v("catch")]),t._v(" 块，如果没有 "),s("code",[t._v("catch")]),t._v(" 块，则必须跟一个 "),s("code",[t._v("finally")]),t._v(" 块。")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("catch")]),t._v("块：")]),t._v(" 用于处理 try 捕获到的异常。")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("finally")]),t._v(" 块：")]),t._v(" 无论是否捕获或处理异常，"),s("code",[t._v("finally")]),t._v(" 块里的语句都会被执行。当在 "),s("code",[t._v("try")]),t._v(" 块或 "),s("code",[t._v("catch")]),t._v(" 块中遇到 "),s("code",[t._v("return")]),t._v(" 语句时，"),s("strong",[s("code",[t._v("finally")]),t._v(" 语句块将在方法返回之前被执行。")])])]),t._v(" "),s("h3",{attrs:{id:"_3-1-try-catch-中含有return-finally还会执行吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-try-catch-中含有return-finally还会执行吗"}},[t._v("#")]),t._v(" 3.1 try/catch 中含有return，finally还会执行吗")]),t._v(" "),s("p",[t._v("结论：")]),t._v(" "),s("ol",[s("li",[t._v("不管有没有出现异常，finally块中代码都会执行")]),t._v(" "),s("li",[t._v("当try和catch中有return时，finally仍然会执行")]),t._v(" "),s("li",[t._v("finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的 值保存起来，管finally中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以函数 返回值是在finally执行前确定的")]),t._v(" "),s("li",[t._v("finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("Tips")]),t._v(" "),s("p",[s("strong",[t._v("在以下 3 种特殊情况下，"),s("code",[t._v("finally")]),t._v(" 块不会被执行：")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("在 "),s("code",[t._v("try")]),t._v(" 或 "),s("code",[t._v("finally")]),t._v("块中用了 "),s("code",[t._v("System.exit(int)")]),t._v("退出程序。但是，如果 "),s("code",[t._v("System.exit(int)")]),t._v(" 在异常语句之后，"),s("code",[t._v("finally")]),t._v(" 还是会被执行")])]),t._v(" "),s("li",[s("p",[t._v("程序所在的线程死亡。")])]),t._v(" "),s("li",[s("p",[t._v("关闭 CPU。")])])])]),t._v(" "),s("h3",{attrs:{id:"_3-2-使用-try-with-resources-来代替try-catch-finally"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-使用-try-with-resources-来代替try-catch-finally"}},[t._v("#")]),t._v(" 3.2 使用 "),s("code",[t._v("try-with-resources")]),t._v(" 来代替"),s("code",[t._v("try-catch-finally")])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("适用范围（资源的定义）：")]),t._v(" 任何实现 "),s("code",[t._v("java.lang.AutoCloseable")]),t._v("或者 "),s("code",[t._v("java.io.Closeable")]),t._v(" 的对象")]),t._v(" "),s("li",[s("strong",[t._v("关闭资源和 finally 块的执行顺序：")]),t._v(" 在 "),s("code",[t._v("try-with-resources")]),t._v(" 语句中，任何 catch 或 finally 块在声明的资源关闭后运行")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),t._v(" scanner "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.txt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scanner"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scanner"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileNotFoundException")]),t._v(" fnfe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fnfe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h2",{attrs:{id:"四、outofmemoryerror"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、outofmemoryerror"}},[t._v("#")]),t._v(" 四、OutOfMemoryError")]),t._v(" "),s("p",[t._v("部分参考自 "),s("a",{attrs:{href:"https://www.cnblogs.com/ThinkVenus/p/6805495.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么是java OOM？如何分析及解决oom问题？"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("OOM，全称“Out Of Memory”，翻译成中文就是“内存用完了”，来源于java.lang.OutOfMemoryError。看下关于的官方说明： Thrown when the Java Virtual Machine cannot allocate an object because it is out of memory, and no more memory could be made available by the garbage collector. 意思就是说，当JVM因为没有足够的内存来为对象分配空间并且垃圾回收器也已经没有空间可回收时，就会抛出这个error")]),t._v(" "),s("h3",{attrs:{id:"_4-1-堆溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-堆溢出"}},[t._v("#")]),t._v(" 4.1 堆溢出")]),t._v(" "),s("p",[t._v("一般的异常信息："),s("code",[t._v("java.lang.OutOfMemoryError:Java heap spacess。")])]),t._v(" "),s("p",[t._v("java堆用于存储对象实例，我们只要 "),s("mark",[t._v("不断的创建对象")]),t._v("，并且保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，就会在对象数量达到最大堆容量限制后产生内存溢出异常。")]),t._v(" "),s("h3",{attrs:{id:"_4-2-虚拟机栈和方法栈溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-虚拟机栈和方法栈溢出"}},[t._v("#")]),t._v(" 4.2 虚拟机栈和方法栈溢出")]),t._v(" "),s("p",[s("mark",[t._v("如果线程请求的栈深度大于虚拟机所允许的最大深度")]),t._v("，将抛出 "),s("code",[t._v("StackOverflowError")]),t._v(" 异常。")]),t._v(" "),s("p",[s("mark",[t._v("如果虚拟机在扩展栈时无法申请到足够的内存空间")]),t._v("，则抛出 "),s("code",[t._v("OutOfMemoryError")]),t._v(" 异常")]),t._v(" "),s("p",[t._v("这里需要注意当栈的大小越大可分配的线程数就越少。")]),t._v(" "),s("h3",{attrs:{id:"_4-3-运行时常量池溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-运行时常量池溢出"}},[t._v("#")]),t._v(" 4.3 运行时常量池溢出")]),t._v(" "),s("p",[t._v("异常信息："),s("code",[t._v("java.lang.OutOfMemoryError:PermGenspace")]),t._v("\n如果要向运行时常量池中添加内容，最简单的做法就是使用 "),s("code",[t._v("String.intern()")]),t._v(" 这个 "),s("code",[t._v("Native")]),t._v(" 方法。该方法的作用是：如果池中已经包含一个等于此 String 的字符串，则返回代表池中这个字符串的 String 对象；否则，将此 String 对象包含的字符串添加到常量池中，并且返回此 String 对象的引用。由于常量池分配在方法区内，我们可以通过 "),s("code",[t._v("-XX:PermSize")]),t._v(" 和 "),s("code",[t._v("-XX:MaxPermSize")]),t._v(" 限制方法区的大小，从而间接限制其中常量池的容量")]),t._v(" "),s("h3",{attrs:{id:"_4-4-方法区溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-方法区溢出"}},[t._v("#")]),t._v(" 4.4 方法区溢出")]),t._v(" "),s("p",[t._v("异常信息："),s("code",[t._v("java.lang.OutOfMemoryError:PermGenspace")])]),t._v(" "),s("p",[t._v("方法区用于存放Class的相关信息，如类名、访问修饰符、常量池、字段描述、方法描述等。也有可能是方法区中保存的 class 对象没有被及时回收掉或者 class 信息占用的内存超过了我们配置。")])])}),[],!1,null,null,null);a.default=r.exports},866:function(t,a,e){t.exports=e.p+"assets/img/Java异常类层次结构图2-16463581576452-16463582756464.bcb64f44.png"},867:function(t,a,e){t.exports=e.p+"assets/img/image-20220304094533701.e0fbce25.png"}}]);