(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{1075:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("转载声明")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://javaguide.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaGuide"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/75265007",target:"_blank",rel:"noopener noreferrer"}},[t._v("2分钟让你明白什么是面向对象编程"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.cnblogs.com/leskang/p/6110631.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("String为什么不可变 - 梦醒点灯"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.jianshu.com/p/a343dae4a818",target:"_blank",rel:"noopener noreferrer"}},[t._v("一文理解哈希冲突四种解决方法 - 简书 (jianshu.com)"),n("OutboundLink")],1)])])]),t._v(" "),n("h2",{attrs:{id:"一、面向对象和面向过程的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、面向对象和面向过程的区别"}},[t._v("#")]),t._v(" 一、面向对象和面向过程的区别")]),t._v(" "),n("p",[n("strong",[t._v("面向过程：")])]),t._v(" "),n("p",[t._v("面向过程的思想会将一件事情，拆分成一个个更具体的小任务，由一个个方法去完成他们。只要按顺序执行这些方法，就能完成这件事情。")]),t._v(" "),n("p",[n("strong",[t._v("面向对象：")])]),t._v(" "),n("p",[t._v("面向对象的思想会把事物抽象成对象的概念，把一件事情拆分成一个个更具体的小问题，交由不同的对象分别完成以解决问题。")]),t._v(" "),n("p",[t._v("更详细生动的说明详见 "),n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/75265007",target:"_blank",rel:"noopener noreferrer"}},[t._v("2分钟让你明白什么是面向对象编程"),n("OutboundLink")],1)]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("项目名称")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("面向对象程序设计")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("面向过程程序设计（也叫结构化编程）")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("定义")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("面向对象顾名思义就是把现实中的事务都抽象成为程序设计中的“对象”，其基本思想是一切皆对象，是一种“自下而上”的设计语言，先设计组件，再完成拼装。")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("面向过程是“自上而下”的设计语言，先定好框架，再增砖添瓦。通俗点，就是先定好main()函数，然后再逐步实现main()函数中所要用到的其他方法。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("特点")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("封装、继承、多态")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("算法+数据结构")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("优势")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("适用于大型复杂系统，方便复用、")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("适用于简单系统，容易理解")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("劣势")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("比较抽象、性能比面向过程低")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("难以应对复杂系统，难以复用，不易维护、不易扩展")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("对比")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、 Linux/Unix等一般采用面向过程开发，性能是最重要的因素")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("设计语言")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("Java、Smalltalk、EIFFEL、C++、Objective-、C#、Python等")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("C、Fortran")])])])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发。")])]),t._v(" "),n("li",[n("p",[t._v("因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。")])])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("面向对象易维护、易复用、易扩展。面向过程性能相对较高。")])]),t._v(" "),n("h2",{attrs:{id:"二、面向对象三大特征"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、面向对象三大特征"}},[t._v("#")]),t._v(" 二、面向对象三大特征")]),t._v(" "),n("h3",{attrs:{id:"_2-1-封装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-封装"}},[t._v("#")]),t._v(" 2.1 封装")]),t._v(" "),n("p",[t._v("封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("封装的好处")]),t._v(" "),n("ul",[n("li",[t._v("隐藏实现细节，提供公共的访问方式")]),t._v(" "),n("li",[t._v("提高代码的复用性")]),t._v(" "),n("li",[t._v("提高安全性（别人不能通过 变量名.属性名 的方式来修改私有的成员属性）")])])]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//id属性私有化")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//name属性私有化")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取id的方法")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置id的方法")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取name的方法")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置name的方法")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br")])]),n("h3",{attrs:{id:"_2-2-继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-继承"}},[t._v("#")]),t._v(" 2.2 继承")]),t._v(" "),n("p",[t._v("继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。")]),t._v(" "),n("ol",[n("li",[t._v("子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，"),n("strong",[t._v("只是拥有")]),t._v("。")]),t._v(" "),n("li",[t._v("子类可以拥有自己属性和方法，即子类可以对父类进行扩展。")]),t._v(" "),n("li",[t._v("子类可以用自己的方式实现父类的方法。")])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("继承的优点")]),t._v(" "),n("ol",[n("li",[t._v("提高代码的复用性")]),t._v(" "),n("li",[t._v("提高代码的易维护性")]),t._v(" "),n("li",[t._v("提高代码的可扩展性")]),t._v(" "),n("li",[t._v("使代码结构清晰")])])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("继承的缺点")]),t._v(" "),n("ol",[n("li",[t._v("高耦合性：父子类联系紧密，修改父类的同时，需要兼顾子类")]),t._v(" "),n("li",[t._v("破坏封装性、降低灵活性")])])]),t._v(" "),n("h3",{attrs:{id:"_2-3-多态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-多态"}},[t._v("#")]),t._v(" 2.3 多态")]),t._v(" "),n("p",[t._v("表示一个对象具有多种的状态，具体表现为父类的引用指向子类的实例。")]),t._v(" "),n("ul",[n("li",[t._v("对象类型和引用类型之间具有继承（类）/实现（接口）的关系；")]),t._v(" "),n("li",[t._v("引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序"),n("strong",[t._v("运行期间")]),t._v("才能确定；")]),t._v(" "),n("li",[t._v("多态不能调用“"),n("strong",[t._v("只在子类存在但在父类不存在")]),t._v("”的方法；")]),t._v(" "),n("li",[t._v("如果子类重写了父类的方法，真正执行的是"),n("strong",[t._v("子类覆盖")]),t._v("的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。")])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("多态存在的必要条件")]),t._v(" "),n("ol",[n("li",[t._v("要有继承")]),t._v(" "),n("li",[t._v("要有重写")]),t._v(" "),n("li",[n("strong",[t._v("父类引用指向子类对象")])])])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("多态的好处")]),t._v(" "),n("ol",[n("li",[t._v("提高了代码的可扩展性")]),t._v(" "),n("li",[t._v("可替换性")]),t._v(" "),n("li",[t._v("接口性：向子类提供共同接口，由子类来完善或覆盖")]),t._v(" "),n("li",[t._v("灵活性")]),t._v(" "),n("li",[t._v("简化性")])])]),t._v(" "),n("h2",{attrs:{id:"三、对象和引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、对象和引用"}},[t._v("#")]),t._v(" 三、对象和引用")]),t._v(" "),n("h3",{attrs:{id:"_3-1-对象实体和对象引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-对象实体和对象引用"}},[t._v("#")]),t._v(" 3.1 对象实体和对象引用")]),t._v(" "),n("p",[t._v("一个对象引用可以指向 0 个或 1 个对象（一根绳子可以不系气球，也可以系一个气球）；一个对象可以有 n 个引用指向它（可以用 n 条绳子系住一个气球）。")]),t._v(" "),n("h3",{attrs:{id:"_3-2-对象相等和引用相等"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-对象相等和引用相等"}},[t._v("#")]),t._v(" 3.2 对象相等和引用相等")]),t._v(" "),n("p",[t._v("对象的相等，比的是内存中存放的内容是否相等。而引用相等，比较的是他们指向的内存地址是否相等。")]),t._v(" "),n("h3",{attrs:{id:"_3-3-四种引用-强弱软虚"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-四种引用-强弱软虚"}},[t._v("#")]),t._v(" 3.3 四种引用，强弱软虚")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("强引用")]),t._v(" "),n("p",[t._v("强引用是平常中使用最多的引用，强引用在程序内存不足（OOM）的时候也不会被回收，使用 方式：")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"str"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])])]),t._v(" "),n("li",[n("p",[t._v("软引用")]),t._v(" "),n("p",[n("strong",[t._v("软引用在程序内存不足时会被回收")]),t._v("，使用方式：")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意：wrf这个引用也是强引用，它是指向SoftReference这个对象的， ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 这里的软引用指的是指向new String("str")的引用，也就是SoftReference类中T ')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SoftReference")]),t._v(" wrf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SoftReference")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"str"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("p",[t._v("可用场景： 创建缓存的时候，创建的对象放进缓存中，当内存不足时，JVM就会回收早先创建 的对象。")])]),t._v(" "),n("li",[n("p",[t._v("弱引用")]),t._v(" "),n("p",[t._v("弱引用就是只要JVM"),n("strong",[t._v("垃圾回收器发现了它就会将之回收")]),t._v("，使用方式：")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakReference")]),t._v(" wrf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakReference")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("可用场景： Java源码中的 java.util.WeakHashMap 中的 key 就是使用弱引用，我的理解就是， 一旦我不需要某个引用，JVM会自动帮我处理它，这样我就不需要做其它操作。")])]),t._v(" "),n("li",[n("p",[t._v("虚引用")]),t._v(" "),n("p",[t._v("虚引用的回收机制跟弱引用差不多，但是它被回收之前，会被放入 ReferenceQueue 中。注意 哦，其它引用是被JVM回收后才被传入 ReferenceQueue 中的。由于这个机制，所以虚引用大多 被用于引用销毁前的处理工作。还有就是，虚引用创建的时候，必须带有 ReferenceQueue ， 使用例子：")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PhantomReference")]),t._v(" prf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PhantomReference")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"str"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReferenceQueue")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("可用场景： 对象销毁前的一些操作，比如说资源释放等。 Object.finalize() 虽然也可以做这 类动作，但是这个方式即不安全又低效")])])]),t._v(" "),n("h3",{attrs:{id:"_3-4-创建对象的四种方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-创建对象的四种方式"}},[t._v("#")]),t._v(" 3.4 创建对象的四种方式")]),t._v(" "),n("ol",[n("li",[t._v("new创建新对象")]),t._v(" "),n("li",[t._v("通过反射机制")]),t._v(" "),n("li",[t._v("采用clone机制")]),t._v(" "),n("li",[t._v("通过序列化机制")])]),t._v(" "),n("h2",{attrs:{id:"四、抽象类和接口的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、抽象类和接口的区别"}},[t._v("#")]),t._v(" 四、抽象类和接口的区别")]),t._v(" "),n("ol",[n("li",[t._v("抽象类中可以定义构造函数，接口不能定义构造函数")]),t._v(" "),n("li",[t._v("抽象类中可以有抽象方法和具体方法，接口中只能有抽象方法")]),t._v(" "),n("li",[t._v("抽象类中的成员权限可以是 "),n("code",[t._v("public")]),t._v("、默认、"),n("code",[t._v("protected")]),t._v("，"),n("strong",[t._v("抽象方法不能被 "),n("code",[t._v("private")]),t._v(" 修饰")]),t._v("，具体方法可以；接口中的成员只能是 "),n("code",[t._v("public")])]),t._v(" "),n("li",[t._v("抽象类中可以包含静态方法（"),n("strong",[t._v("具体方法可以是静态的，抽象方法不行")]),t._v("），接口中不能包含静态方法（因为接口中定义的方法就是为了让实现类去实现，但是静态方法必须在编译时实现）")])]),t._v(" "),n("div",{staticClass:"custom-block info"},[n("p",{staticClass:"custom-block-title"},[t._v("JDK8 的改变")]),t._v(" "),n("ol",[n("li",[t._v("允许在接口中包含具体实现的方法，使用 "),n("code",[t._v("default")]),t._v(" 修饰")]),t._v(" "),n("li",[t._v("因为允许具体实现的方法，接口中也就允许有静态方法")])])]),t._v(" "),n("h2",{attrs:{id:"五、比较方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、比较方法"}},[t._v("#")]),t._v(" 五、比较方法")]),t._v(" "),n("h3",{attrs:{id:"_5-1-和-equals-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-和-equals-的区别"}},[t._v("#")]),t._v(" 5.1 == 和 equals() 的区别")]),t._v(" "),n("p",[n("strong",[n("code",[t._v("==")])]),t._v(" 对于基本类型和引用类型的作用效果是不同的：")]),t._v(" "),n("ul",[n("li",[t._v("对于基本数据类型来说，"),n("code",[t._v("==")]),t._v(" 比较的是值。")]),t._v(" "),n("li",[t._v("对于引用数据类型来说，"),n("code",[t._v("==")]),t._v(" 比较的是对象的内存地址。")])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Java 只有值传递")]),t._v(" "),n("p",[t._v("所以，对于 == 来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。")])]),t._v(" "),n("p",[n("strong",[n("code",[t._v("equals()")])]),t._v(" 作用不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。"),n("code",[t._v("equals()")]),t._v("方法存在于"),n("code",[t._v("Object")]),t._v("类中，而"),n("code",[t._v("Object")]),t._v("类是所有类的直接或间接父类。")]),t._v(" "),n("div",{staticClass:"custom-block info"},[n("p",{staticClass:"custom-block-title"},[t._v("Object.equals()")]),t._v(" "),n("p",[t._v("如果没有对该方法进行重写，"),n("code",[t._v("Object")]),t._v(" 中的 "),n("code",[t._v("equals()")]),t._v(" 方法仍然是 == 比较。")])]),t._v(" "),n("h3",{attrs:{id:"_5-2-hashcode-与-equals"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-hashcode-与-equals"}},[t._v("#")]),t._v(" 5.2 hashCode() 与 equals()")]),t._v(" "),n("p",[t._v("因为两个相等的对象的 "),n("code",[t._v("hashCode")]),t._v(" 值必须是相等。也就是说如果 "),n("code",[t._v("equals")]),t._v(" 方法判断两个对象是相等的，那这两个对象的 "),n("code",[t._v("hashCode")]),t._v(" 值也要相等。")]),t._v(" "),n("p",[t._v("如果重写 "),n("code",[t._v("equals()")]),t._v(" 时没有重写 "),n("code",[t._v("hashCode()")]),t._v(" 方法的话就可能会导致 "),n("code",[t._v("equals")]),t._v(" 方法判断是相等的两个对象，"),n("code",[t._v("hashCode")]),t._v(" 值却不相等。")]),t._v(" "),n("p",[t._v("更多解释见  "),n("a",{attrs:{href:"https://javaguide.cn/java/basis/java-basic-questions-01/#hashcode-%E4%B8%8E-equals",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java基础常见知识&面试题总结(上) | JavaGuide"),n("OutboundLink")],1)]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("hashCode的作用")]),t._v(" "),n("p",[t._v("hashCode和equals有一个相同的作用，就是用作比较：")]),t._v(" "),n("ul",[n("li",[t._v("equals 为true的两个对象相等，false则两个对象不相等")]),t._v(" "),n("li",[t._v("hashCode 相同的两个对象不一定相等，但不同的两个对象一定不相等")])])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("为什么要有 hashCode？")]),t._v(" "),n("p",[n("strong",[t._v("效率")]),t._v("\n当一个对象逐渐复杂时，equals方法中的判定条件也会逐渐复杂，这个时候比较两个对象是否相等依旧使用equals的话，就会变得低效。")]),t._v(" "),n("p",[t._v("因此引出hashCode，通过一定的计算方式，为每个对象分配一个“哈希码”，让相等的对象都拥有相同的哈希码。之后需要比较两个对象的时候，先比较哈希码，如果哈希码都不相同，两个对象一定不相等。如果哈希码相同，再继续使用equals确定对象是否相等。")]),t._v(" "),n("p",[t._v("hashCode 方法相对与 equals 会更加高效，通过这两步判断，来确定两个对象是否相等")])]),t._v(" "),n("h2",{attrs:{id:"六、构造方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六、构造方法"}},[t._v("#")]),t._v(" 六、构造方法")]),t._v(" "),n("h3",{attrs:{id:"_6-1-构造方法的特点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-构造方法的特点"}},[t._v("#")]),t._v(" 6.1 构造方法的特点")]),t._v(" "),n("ol",[n("li",[t._v("名字与类名相同。")]),t._v(" "),n("li",[t._v("没有返回值，但不能用 void 声明构造函数。")]),t._v(" "),n("li",[t._v("生成类的对象时自动执行，无需调用。")])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Tips")]),t._v(" "),n("p",[t._v("构造方法不能被 override（重写），但是可以 overload（重载），所以你可以看到一个类中有多个构造函数的情况。")])]),t._v(" "),n("h3",{attrs:{id:"_6-2-无参构造函数的作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-无参构造函数的作用"}},[t._v("#")]),t._v(" 6.2 无参构造函数的作用")]),t._v(" "),n("ol",[n("li",[t._v("不写任何构造器，也会有一个默认的无参构造。但如果写了有参构造，就必须另写一个无参构造，否则就无法执行无参构造。")]),t._v(" "),n("li",[t._v("子类的构造当中，如果没有指定 super() 来调用父类中某个构造方法，则会调用父类中的无参构。如果这个时候父类中存在有参构造而没有无参构造，就会出错。")])]),t._v(" "),n("h3",{attrs:{id:"_6-3-构造器是否可以被重写"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-构造器是否可以被重写"}},[t._v("#")]),t._v(" 6.3 构造器是否可以被重写？")]),t._v(" "),n("p",[t._v("父类的私有属性、方法以及构造器都是不能被重写的。")]),t._v(" "),n("h2",{attrs:{id:"七、-string、stringbuffer、stringbuilder"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七、-string、stringbuffer、stringbuilder"}},[t._v("#")]),t._v(" 七、 "),n("code",[t._v("String")]),t._v("、"),n("code",[t._v("StringBuffer")]),t._v("、"),n("code",[t._v("StringBuilder")])]),t._v(" "),n("h3",{attrs:{id:"_7-1-string-为什么是不可变的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-string-为什么是不可变的"}},[t._v("#")]),t._v(" 7.1 "),n("code",[t._v("String")]),t._v(" 为什么是不可变的")]),t._v(" "),n("p",[t._v("详细参考 "),n("a",{attrs:{href:"https://www.cnblogs.com/leskang/p/6110631.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("String为什么不可变 - 梦醒点灯"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("在Java中String类其实就是对字符数组的封装。")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Serializable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CharSequence")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("ol",[n("li",[t._v("保存字符串的数组被 "),n("code",[t._v("final")]),t._v(" 修饰且为私有的，并且"),n("code",[t._v("String")]),t._v(" 类没有提供/暴露修改这个字符串的方法。")]),t._v(" "),n("li",[n("code",[t._v("String")]),t._v(" 类被 "),n("code",[t._v("final")]),t._v(" 修饰导致其不能被继承，进而避免了子类破坏 "),n("code",[t._v("String")]),t._v(" 不可变。")])]),t._v(" "),n("h3",{attrs:{id:"_7-2-string-真的不可变吗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-string-真的不可变吗"}},[t._v("#")]),t._v(" 7.2 "),n("code",[t._v("String")]),t._v(" 真的不可变吗？")]),t._v(" "),n("p",[t._v("以下内容转载自 "),n("a",{attrs:{href:"https://www.cnblogs.com/leskang/p/6110631.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("String为什么不可变 - 梦醒点灯"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("String的成员变量是private final 的，也就是初始化之后不可改变。那么在这几个成员中， value比较特殊，因为他是一个引用变量，而不是真正的对象。value是final修饰的，也就是说final不能再指向其他数组对象，那么我能改变value指向的数组吗？")]),t._v(" "),n("p",[n("strong",[t._v("反射")])]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("testReflection")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//创建字符串"Hello World"， 并赋给引用s')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n     \n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s = "')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Hello World")]),t._v("\n     \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取String类中的value字段")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Field")]),t._v(" valueFieldOfString "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDeclaredField")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//改变value属性的访问权限")]),t._v("\n    valueFieldOfString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAccessible")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取s对象上的value属性的值")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" valueFieldOfString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//改变value所引用的数组中的第5个字符")]),t._v("\n    value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token char"}},[t._v("'_'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     \n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s = "')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Hello_World")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br")])]),n("p",[t._v("打印结果为：")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("s "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Hello")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("World")]),t._v("\ns "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Hello_World")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("p",[t._v("在这个过程中，s始终引用的同一个String对象，但是再反射前后，这个String对象发生了变化， 也就是说，通过反射是可以修改所谓的【不可变】对象的。但是一般我们不这么做。这个反射的实例还可以说明一个问题：如果一个对象，他组合的其他对象的状态是可以改变的，那么这个对象很可能不是不可变对象。例如一个Car对象，它组合了一个Wheel对象，虽然这个Wheel对象声明成了private final 的，但是这个Wheel对象内部的状态可以改变， 那么就不能很好的保证Car对象不可变。")]),t._v(" "),n("h3",{attrs:{id:"_7-3-stringbuffer、stringbuilder"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-stringbuffer、stringbuilder"}},[t._v("#")]),t._v(" 7.3 "),n("code",[t._v("StringBuffer")]),t._v("、"),n("code",[t._v("StringBuilder")])]),t._v(" "),n("p",[n("code",[t._v("StringBuilder")]),t._v(" 与 "),n("code",[t._v("StringBuffer")]),t._v(" 都继承自 "),n("code",[t._v("AbstractStringBuilder")]),t._v(" 类，在 "),n("code",[t._v("AbstractStringBuilder")]),t._v(" 中也是使用字符数组保存字符串，不过没有使用 "),n("code",[t._v("final")]),t._v(" 和 "),n("code",[t._v("private")]),t._v(" 关键字修饰，最关键的是这个 "),n("code",[t._v("AbstractStringBuilder")]),t._v(" 类还提供了很多修改字符串的方法比如 "),n("code",[t._v("append")]),t._v(" 方法。")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractStringBuilder")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Appendable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CharSequence")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractStringBuilder")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendNull")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ensureCapacityInternal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getChars")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br")])]),n("h3",{attrs:{id:"_7-4-线程安全性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-线程安全性"}},[t._v("#")]),t._v(" 7.4 线程安全性")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Tips")]),t._v(" "),n("p",[n("code",[t._v("String")]),t._v("、"),n("code",[t._v("StringBuffer")]),t._v(" 是线程安全的，"),n("code",[t._v("StringBuilder")]),t._v(" 非线程安全。")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("String")]),t._v(" 中的对象是不可变的，也就可以理解为常量，线程安全。")]),t._v(" "),n("li",[n("code",[t._v("AbstractStringBuilder")]),t._v(" 是 "),n("code",[t._v("StringBuilder")]),t._v(" 与 "),n("code",[t._v("StringBuffer")]),t._v(" 的公共父类，定义了一些字符串的基本操作，如 "),n("code",[t._v("expandCapacity")]),t._v("、"),n("code",[t._v("append")]),t._v("、"),n("code",[t._v("insert")]),t._v("、"),n("code",[t._v("indexOf")]),t._v(" 等公共方法。\n"),n("ul",[n("li",[n("code",[t._v("StringBuffer")]),t._v(" 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。")]),t._v(" "),n("li",[n("code",[t._v("StringBuilder")]),t._v(" 并没有对方法进行加同步锁，所以是非线程安全的。")])])])]),t._v(" "),n("h3",{attrs:{id:"_7-5-性能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-性能"}},[t._v("#")]),t._v(" 7.5 性能")]),t._v(" "),n("p",[n("code",[t._v("StringBuilder")]),t._v(" > "),n("code",[t._v("StringBuffer")]),t._v(" > "),n("code",[t._v("String")])]),t._v(" "),n("p",[t._v("每次对 "),n("code",[t._v("String")]),t._v(" 类型进行改变的时候，都会生成一个新的 "),n("code",[t._v("String")]),t._v(" 对象，然后将指针指向新的 "),n("code",[t._v("String")]),t._v(" 对象。"),n("code",[t._v("StringBuffer")]),t._v(" 每次都会对 "),n("code",[t._v("StringBuffer")]),t._v(" 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 "),n("code",[t._v("StringBuilder")]),t._v(" 相比使用 "),n("code",[t._v("StringBuffer")]),t._v(" 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。")]),t._v(" "),n("ol",[n("li",[t._v("操作少量的数据: 适用 "),n("code",[t._v("String")])]),t._v(" "),n("li",[t._v("单线程操作字符串缓冲区下操作大量数据: 适用 "),n("code",[t._v("StringBuilder")])]),t._v(" "),n("li",[t._v("多线程操作字符串缓冲区下操作大量数据: 适用 "),n("code",[t._v("StringBuffer")])])]),t._v(" "),n("h2",{attrs:{id:"八、-object-类的常见方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#八、-object-类的常见方法"}},[t._v("#")]),t._v(" 八、 "),n("code",[t._v("Object")]),t._v(" 类的常见方法")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native方法，用于返回当前运行时对象的Class对象，使用了final关键字修饰，故不允许子类重写。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native方法，用于返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//用于比较2个对象的内存地址是否相等，String类对该方法进行了重写用户比较字符串的值是否相等。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//naitive方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 为true。Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException异常。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CloneNotSupportedException")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("notify")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native方法，并且不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("notifyAll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native方法，并且不能重写。暂停线程的执行。注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nanos"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//实例被垃圾回收器回收的时候触发的操作")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("finalize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br")])]),n("h2",{attrs:{id:"九、深拷贝和浅拷贝、引用拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#九、深拷贝和浅拷贝、引用拷贝"}},[t._v("#")]),t._v(" 九、深拷贝和浅拷贝、引用拷贝")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Tips")]),t._v(" "),n("p",[n("strong",[t._v("浅拷贝")]),t._v("：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指 向原来的对象。换言之，"),n("mark",[t._v("浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象")])]),t._v(" "),n("p",[n("strong",[t._v("深拷贝")]),t._v(" ：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。")])]),t._v(" "),n("p",[t._v("引用拷贝就是两个不同的引用指向同一个对象。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(868),alt:"img",loading:"lazy"}})])])}),[],!1,null,null,null);s.default=e.exports},868:function(t,s,a){t.exports=a.p+"assets/img/shallow&deep-copy.64ee0760.64ee0760.png"}}]);