(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{1116:function(a,t,s){"use strict";s.r(t);var v=s(1),_=Object(v.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("div",{staticClass:"custom-block warning"},[v("p",{staticClass:"custom-block-title"},[a._v("转载声明")]),a._v(" "),v("ul",[v("li",[a._v("《深入理解Java虚拟机》")])])]),a._v(" "),v("p",[a._v("衡量垃圾收集器的三项最重要的指标是："),v("mark",[a._v("内存占用（Footprint）、吞吐量（Throughput）和延迟 （Latency）")]),a._v(" ，三者共同构成了一个“不可能三角”")]),a._v(" "),v("p",[a._v("图3-14中浅色阶段表示必须挂起用户线程，深色表示收集器线程与用户线程是并发工作的。")]),a._v(" "),v("p",[v("img",{attrs:{src:s(922),alt:"image-20220317093803558",loading:"lazy"}})]),a._v(" "),v("h2",{attrs:{id:"一、shenandoah-收集器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、shenandoah-收集器"}},[a._v("#")]),a._v(" 一、Shenandoah 收集器")]),a._v(" "),v("p",[a._v("Shenandoah 更像是 G1 的下一代继承者，它们两者有着相似的堆内存布局，在初始标记、并发标记等许多阶段的处理思路上都高度一致，甚至还直接共享了一部分实现代码")]),a._v(" "),v("h3",{attrs:{id:"_1-1-shenandoah-和-g1-的不同"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-shenandoah-和-g1-的不同"}},[a._v("#")]),a._v(" 1.1 Shenandoah 和 G1 的不同")]),a._v(" "),v("ol",[v("li",[a._v("支持并发的整理算法：G1 的回收阶段是可以多线程并行的，但不能与用户线程并发")]),a._v(" "),v("li",[a._v("默认不使用分代收集：")]),a._v(" "),v("li",[a._v("摒弃记忆集，改用连接矩阵：连接矩阵记录跨Region的引用关系，降低了处理跨代指针时的记忆集维护消耗，也降低了伪共享问题的发生概率")])]),a._v(" "),v("p",[v("img",{attrs:{src:s(923),alt:"image-20220317095213696",loading:"lazy"}})]),a._v(" "),v("div",{staticClass:"custom-block note"},[v("p",{staticClass:"custom-block-title"},[a._v("连接矩阵")]),a._v(" "),v("p",[a._v("不太懂，以后再补")])]),a._v(" "),v("h3",{attrs:{id:"_1-2-工作阶段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-工作阶段"}},[a._v("#")]),a._v(" 1.2 工作阶段")]),a._v(" "),v("ol",[v("li",[a._v("初始标记：首先标记与GC Roots直接关联的对象，仍然是 "),v("mark",[a._v("Stop The World")])]),a._v(" "),v("li",[a._v("并发标记：遍历对象图，标记出全部可达的对象， "),v("mark",[a._v("与用户线程并发")])]),a._v(" "),v("li",[a._v("最终标记：处理剩余的SATB扫描，并在这个阶段统计出回收价值最高的Region，将这些Region构成一组回收集。 "),v("mark",[a._v("有停顿")])]),a._v(" "),v("li",[a._v("并发清理：清理那些整个区域内连一个存活对象都没有找到的Region")]),a._v(" "),v("li",[a._v("并发回收：把回收集里面的存活对象先复制一份到其他未被使用的Region之中。（涉及读屏障、转发指针）")]),a._v(" "),v("li",[a._v("初始引用更新：建立一个线程集合点，确保所有并发回收阶段中进行的收集器线程都已完成分配给它们的对象移动任务。 "),v("mark",[a._v("短暂停顿")])]),a._v(" "),v("li",[a._v("并发引用更新：把堆中所有指向旧对象的引用修正到复制后的新地。 "),v("mark",[a._v("与用户线程并发")])]),a._v(" "),v("li",[a._v("最终引用更新：修正存在于GC Roots 中的引用。 "),v("mark",[a._v("最后一次停顿")])]),a._v(" "),v("li",[a._v("并发清理：回收内存空间")])]),a._v(" "),v("p",[v("img",{attrs:{src:s(924),alt:"image-20220317100109273",loading:"lazy"}})]),a._v(" "),v("div",{staticClass:"custom-block note"},[v("p",{staticClass:"custom-block-title"},[a._v("插眼")]),a._v(" "),v("p",[a._v("文档中后半部分看不懂，没再记录，之后再补")])]),a._v(" "),v("h2",{attrs:{id:"二、zgc-收集器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、zgc-收集器"}},[a._v("#")]),a._v(" 二、ZGC 收集器")])])}),[],!1,null,null,null);t.default=_.exports},922:function(a,t,s){a.exports=s.p+"assets/img/image-20220317093803558.2e0e5abd.png"},923:function(a,t,s){a.exports=s.p+"assets/img/image-20220317095213696.ebb9d8dd.png"},924:function(a,t,s){a.exports=s.p+"assets/img/image-20220317100109273.edd46558.png"}}]);