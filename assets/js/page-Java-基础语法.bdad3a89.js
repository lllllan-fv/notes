(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{1071:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("转载声明")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://javaguide.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaGuide"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/382239048",target:"_blank",rel:"noopener noreferrer"}},[t._v("还不知道泛型是什么？这一篇深入浅出泛型教学！"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/259368621",target:"_blank",rel:"noopener noreferrer"}},[t._v("详解Java 中 static 的作用 - 知乎 (zhihu.com)"),n("OutboundLink")],1)])])]),t._v(" "),n("h2",{attrs:{id:"一、静态方法为什么不能调用非静态方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、静态方法为什么不能调用非静态方法"}},[t._v("#")]),t._v(" 一、静态方法为什么不能调用非静态方法？")]),t._v(" "),n("ol",[n("li",[t._v("静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问。")]),t._v(" "),n("li",[t._v("在类的非静态成员不存在的时候静态成员就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。")])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("为什么要用静态方法？")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("更方便")]),t._v("：静态方法的好处就是不用生成类的实例就可以直接调用。")]),t._v(" "),n("li",[n("strong",[t._v("降低消耗")]),t._v("：只需要通过其类名就可以访问，不需要再消耗资源反复创建对象。")])])]),t._v(" "),n("h2",{attrs:{id:"二、常见语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、常见语法"}},[t._v("#")]),t._v(" 二、常见语法")]),t._v(" "),n("h3",{attrs:{id:"_2-1-操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-操作符"}},[t._v("#")]),t._v(" 2.1  操作符 +=")]),t._v(" "),n("p",[n("code",[t._v("+=")]),t._v(" 操作符会进行隐式自动类型转换")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error:(5, 15) java: 不兼容的类型: 从int转换到byte可能会有损失")]),t._v("\na "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a = -2")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error:(4, 15) java: 不兼容的类型: 从int转换到short可能会有损失")]),t._v("\na "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a = 2")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("p",[t._v("运算中的 "),n("code",[t._v("1")]),t._v(" 默认是 "),n("code",[t._v("int")]),t._v("类型，那么将 "),n("code",[t._v("int")]),t._v(" 类型赋值给 "),n("code",[t._v("short")]),t._v(" 类型时，会出现类型转换错误。")]),t._v(" "),n("p",[t._v("而对于 "),n("code",[t._v("+=")]),t._v("，是 Java 语言规定的运算符， Java 编译器自己会进行特殊处理")]),t._v(" "),n("h3",{attrs:{id:"_2-2-switch-能否作用在-byte、long、string上"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-switch-能否作用在-byte、long、string上"}},[t._v("#")]),t._v(" 2.2 switch 能否作用在  "),n("code",[t._v("byte")]),t._v("、"),n("code",[t._v("long")]),t._v("、"),n("code",[t._v("String")]),t._v("上？")]),t._v(" "),n("p",[t._v("switch 中放的只能是一个整数表达式或枚举常量。而整数表达式可以是 "),n("code",[t._v("int")]),t._v(" 或 "),n("code",[t._v("Integer")])]),t._v(" "),n("ul",[n("li",[t._v("由于 "),n("code",[t._v("byte")]),t._v("、"),n("code",[t._v("short")]),t._v("、"),n("code",[t._v("char")]),t._v(" 都可以隐式转换为 "),n("code",[t._v("int")]),t._v("，因此这些类型以及他们的包装类都是可以用的。")]),t._v(" "),n("li",[n("code",[t._v("long")]),t._v(" 不可以")]),t._v(" "),n("li",[n("code",[t._v("String")]),t._v(" 在 JDK1.7 之后可以使用")])]),t._v(" "),n("h2",{attrs:{id:"三、常见关键字"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、常见关键字"}},[t._v("#")]),t._v(" 三、常见关键字")]),t._v(" "),n("h3",{attrs:{id:"_3-1-instanceof-关键字的作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-instanceof-关键字的作用"}},[t._v("#")]),t._v(" 3.1 instanceof 关键字的作用")]),t._v(" "),n("p",[n("code",[t._v("instanceof")]),t._v("  严格来说是Java中的一个双目运算符，用来测试一个对象是否为一个类的实例，用法 为：")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("​\t\t其中 obj 为一个对象，Class 表示一个类或者一个接口，当 obj 为 Class 的对象，或者是其直接 或间接子类，或者是其接口的实现类，结果result 都返回 true，否则返回false。")]),t._v(" "),n("p",[t._v("​\t\t 注意：编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，如果不能 确定类型，则通过编译，具体看运行时定。")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//编译不通过 i必须是引用类型，不能是基本类型 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//编译不通过")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" integer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true ")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false ,在 JavaSE规范 中对 instanceof 运算符的规定就是：如果 obj 为 null，那么将返 回 false。 ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("h3",{attrs:{id:"_3-2-final有哪些用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-final有哪些用法"}},[t._v("#")]),t._v(" 3.2 final有哪些用法")]),t._v(" "),n("ol",[n("li",[t._v("被final修饰的类不可以被继承")]),t._v(" "),n("li",[t._v("被final修饰的方法不可以被重写")]),t._v(" "),n("li",[t._v("被final修饰的方法，JVM会尝试将其内联，以提高运行效率")]),t._v(" "),n("li",[t._v("被final修饰的变量不可以被改变。如果修饰引用，那么表示引用不可变，引用指向的内容可变")]),t._v(" "),n("li",[t._v("被final修饰的常量，在编译阶段会存入常量池中")])]),t._v(" "),n("h3",{attrs:{id:"_3-3-static-的作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-static-的作用"}},[t._v("#")]),t._v(" 3.3 static 的作用")]),t._v(" "),n("ol",[n("li",[t._v("static 成员变量/成员方法：称为静态变量和静态方法，属于类而非实例。因此可以通过 "),n("code",[t._v("类名.静态变量名/静态方法名")]),t._v(" 的方式来获取变量或者调用，而不用创建实例")]),t._v(" "),n("li",[t._v("static 代码块：称为静态代码块，会在JVM加载类时执行，可以做一些类成员变量的初始化工作")]),t._v(" "),n("li",[t._v("static 内部类：称为静态内部类，静态内部类只能访问外部类的静态方法和静态变量，而不能访问其实例变量。")])]),t._v(" "),n("h2",{attrs:{id:"四、重载和重写的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、重载和重写的区别"}},[t._v("#")]),t._v(" 四、重载和重写的区别")]),t._v(" "),n("h3",{attrs:{id:"_4-1-重载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-重载"}},[t._v("#")]),t._v(" 4.1 重载：")]),t._v(" "),n("p",[t._v("发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。")]),t._v(" "),n("h3",{attrs:{id:"_4-2-重写"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-重写"}},[t._v("#")]),t._v(" 4.2 重写")]),t._v(" "),n("p",[t._v("重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。")]),t._v(" "),n("ol",[n("li",[t._v("返回值类型、方法名、参数列表必须相同，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。")]),t._v(" "),n("li",[t._v("如果父类方法访问修饰符为 "),n("code",[t._v("private/final/static")]),t._v(" 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。")]),t._v(" "),n("li",[t._v("构造方法无法被重写")])]),t._v(" "),n("div",{staticClass:"custom-block danger"},[n("p",{staticClass:"custom-block-title"},[t._v("重写一个 private 或者 static 方法？")]),t._v(" "),n("p",[t._v("重写，又称覆盖，是在 "),n("mark",[t._v("运行时绑定")]),t._v(" 的。")]),t._v(" "),n("ul",[n("li",[t._v("子类不能访问或使用父类中的 private 方法，因此不能实现重写")]),t._v(" "),n("li",[t._v("static 方法是编译时静态绑定的，就算子类中再写了一个同名同参的相同方法，也只是两个毫不相干的方法，不能称为重写。")])]),t._v(" "),n("p",[n("img",{attrs:{src:s(863),alt:"image-20220308083039176",loading:"lazy"}})]),t._v(" "),n("div",{staticClass:"custom-block note"},[n("p",{staticClass:"custom-block-title"},[t._v("方法的重写发生在运行时")]),t._v(" "),n("p",[t._v("因为在编译时，编译器是无法知道我们到底是调用父类的方法还是子类的方法，相反的，只有在实际运行的时候，我们才知道应该调用哪个方法。这个也是java运行时多态的体现。")]),t._v(" "),n("p",[t._v("静态方法在类加载时就出现了，和重写不在同一个时期。通过 IDEA 也可以发现，普通方法 "),n("code",[t._v("print()")]),t._v(" 的重写，方法左边有一个图标标识，而静态方法 "),n("code",[t._v("staticPrint()")]),t._v(" 的两个方法，两者之间没有关系。")])])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("父类的私有属性、方法以及构造器都是不能被重写的。")])]),t._v(" "),n("h3",{attrs:{id:"_4-3-总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-总结"}},[t._v("#")]),t._v(" 4.3 总结")]),t._v(" "),n("p",[t._v("重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[t._v("区别点")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("重载方法")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("重写方法")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("发生范围")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("同一个类")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("子类")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("参数列表")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("必须修改")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("一定不能修改")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("返回类型")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("可修改")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("子类方法返回值类型应比父类方法返回值类型更小或相等")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("异常")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("可修改")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("访问修饰符")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("可修改")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("一定不能做更严格的限制（可以降低限制）")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("发生阶段")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("编译期")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("运行期")])])])]),t._v(" "),n("h2",{attrs:{id:"五、泛型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、泛型"}},[t._v("#")]),t._v(" 五、泛型")]),t._v(" "),n("p",[t._v("下面部分转载自 "),n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/382239048",target:"_blank",rel:"noopener noreferrer"}},[t._v("还不知道泛型是什么？这一篇深入浅出泛型教学！"),n("OutboundLink")],1)]),t._v(" "),n("h3",{attrs:{id:"_5-1-为什么会有泛型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-为什么会有泛型"}},[t._v("#")]),t._v(" 5.1 为什么会有泛型")]),t._v(" "),n("blockquote",[n("p",[t._v("早期的Object类型可以接收任意的对象类型，但是在实际的使用中，会有类型转换的问题。也就存在这隐患，所以Java提供了"),n("strong",[t._v("泛型")]),t._v("来解决这个安全问题。")])]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//测试一下泛型的经典案例")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),t._v(" arrayList "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    arrayList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"helloWorld"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    arrayList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"taiziyenezha"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    arrayList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("88")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//由于集合没有做任何限定，任何类型都可以给其中存放")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" arrayList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//需求：打印每个字符串的长度,就要把对象转成String类型")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" arrayList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br")])]),n("p",[t._v("运行这段代码，程序在运行时发生了异常："),n("code",[t._v('Exception in thread "main" java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String')]),t._v("\n发生了数据类型转换异常，这是为什么？")]),t._v(" "),n("p",[t._v("由于ArrayList可以存放任意类型的元素。例子中添加了一个String类型，添加了一个Integer类型，再使用时都以String的方式使用，导致取出时强制转换为String类型后，引发了ClassCastException，因此程序崩溃了。")]),t._v(" "),n("p",[t._v("这显然不是我们所期望的，如果程序有潜在的错误，我们更期望在编译时被告知错误，而不是在运行时报异常。而为了解决类似这样的问题（在编译阶段就可以解决），在jdk1.5后，泛型应运而生。让你在设计API时可以指定类或方法支持泛型，这样我们使用API的时候也变得更为简洁，并得到了编译时期的语法检查。")]),t._v(" "),n("p",[t._v("我们将第一行声明初始化ArrayList的代码更改一下，编译器就会在编译阶段就能够帮我们发现类似这样的问题。现在再看看效果。")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" arrayList "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\narrayList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"helloWorld"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\narrayList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"taiziyenezha"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\narrayList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("88")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在编译阶段，编译器就会报错这样可以避免了我们类型强转时出现异常。")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("h3",{attrs:{id:"_5-2-什么是泛型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-什么是泛型"}},[t._v("#")]),t._v(" 5.2 什么是泛型")]),t._v(" "),n("p",[n("strong",[t._v("泛型")]),t._v("：是一种把明确类型的工作推迟到创建对象或者调用方法的时候才去明确的特殊的类型。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，而这种参数类型可以用在"),n("strong",[t._v("类、方法和接口")]),t._v("中，分别被称为"),n("code",[t._v("泛型类")]),t._v("、"),n("code",[t._v("泛型方法")]),t._v("、"),n("code",[t._v("泛型接口")]),t._v("。")]),t._v(" "),n("div",{staticClass:"custom-block info"},[n("p",{staticClass:"custom-block-title"},[t._v("一般在创建对象时，将未知的类型确定具体的类型。当没有指定泛型时，默认类型为Object类型。")])]),t._v(" "),n("h3",{attrs:{id:"_5-3-泛型的好处"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-泛型的好处"}},[t._v("#")]),t._v(" 5.3 泛型的好处")]),t._v(" "),n("ul",[n("li",[t._v("避免了类型强转的麻烦。")]),t._v(" "),n("li",[t._v("它提供了编译期的"),n("strong",[t._v("类型安全")]),t._v("，确保在泛型类型（通常为泛型集合）上只能使用正确类型的对象，避免了在运行时出现ClassCastException。")])])])}),[],!1,null,null,null);a.default=e.exports},863:function(t,a,s){t.exports=s.p+"assets/img/image-20220308083039176.e49d9c8a.png"}}]);