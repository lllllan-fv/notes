(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{1073:function(t,a,e){"use strict";e.r(a);var v=e(1),s=Object(v.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("div",{staticClass:"custom-block warning"},[v("p",{staticClass:"custom-block-title"},[t._v("转载声明")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://javaguide.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaGuide"),v("OutboundLink")],1)])])]),t._v(" "),v("h2",{attrs:{id:"一、数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、数据类型"}},[t._v("#")]),t._v(" 一、数据类型")]),t._v(" "),v("p",[v("img",{attrs:{src:e(864),alt:"Java数据类型结构图",loading:"lazy"}})]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("类型名称")]),t._v(" "),v("th",[t._v("关键字")]),t._v(" "),v("th",[t._v("占用内存")]),t._v(" "),v("th",[t._v("取值范围")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("字节型")]),t._v(" "),v("td",[t._v("byte")]),t._v(" "),v("td",[t._v("1 字节")]),t._v(" "),v("td",[t._v("-128~127")])]),t._v(" "),v("tr",[v("td",[t._v("短整型")]),t._v(" "),v("td",[t._v("short")]),t._v(" "),v("td",[t._v("2 字节")]),t._v(" "),v("td",[t._v("-32768~32767")])]),t._v(" "),v("tr",[v("td",[t._v("整型")]),t._v(" "),v("td",[t._v("int")]),t._v(" "),v("td",[t._v("4 字节")]),t._v(" "),v("td",[t._v("-2147483648~2147483647")])]),t._v(" "),v("tr",[v("td",[t._v("长整型")]),t._v(" "),v("td",[t._v("long")]),t._v(" "),v("td",[t._v("8 字节")]),t._v(" "),v("td",[t._v("-9223372036854775808L~9223372036854775807L")])]),t._v(" "),v("tr",[v("td",[t._v("布尔型")]),t._v(" "),v("td",[t._v("boolean")]),t._v(" "),v("td",[t._v("1 字节")]),t._v(" "),v("td",[t._v("true 或 false")])]),t._v(" "),v("tr",[v("td",[t._v("字符型")]),t._v(" "),v("td",[t._v("char")]),t._v(" "),v("td",[t._v("2 字节")]),t._v(" "),v("td",[t._v("ISO 单一字符集")])]),t._v(" "),v("tr",[v("td",[t._v("单精度浮点型")]),t._v(" "),v("td",[t._v("float")]),t._v(" "),v("td",[t._v("4 字节")]),t._v(" "),v("td",[t._v("+/-3.4E+38F（6~7 个有效位）")])]),t._v(" "),v("tr",[v("td",[t._v("双精度浮点型")]),t._v(" "),v("td",[t._v("double")]),t._v(" "),v("td",[t._v("8 字节")]),t._v(" "),v("td",[t._v("+/-1.8E+308 (15 个有效位）")])])])]),t._v(" "),v("div",{staticClass:"custom-block info"},[v("p",{staticClass:"custom-block-title"},[t._v("各种数据的存放位置")]),t._v(" "),v("ul",[v("li",[t._v("只要是全局变量，就全都存放在堆中。")]),t._v(" "),v("li",[t._v("如果是局部变量，基本数据类型和引用存放在栈中，对象实体存放在堆中。")])])]),t._v(" "),v("h2",{attrs:{id:"二、变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、变量"}},[t._v("#")]),t._v(" 二、变量")]),t._v(" "),v("h3",{attrs:{id:"_2-1-成员变量和局部变量的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-成员变量和局部变量的区别"}},[t._v("#")]),t._v(" 2.1 成员变量和局部变量的区别")]),t._v(" "),v("p",[v("img",{attrs:{src:e(865),alt:"image-20220116180214826",loading:"lazy"}})]),t._v(" "),v("h3",{attrs:{id:"_2-2-静态变量和实例变量的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-静态变量和实例变量的区别"}},[t._v("#")]),t._v(" 2.2  静态变量和实例变量的区别")]),t._v(" "),v("ul",[v("li",[t._v("静态变量：被 "),v("code",[t._v("static")]),t._v(" 修饰，也称类变量。它属于类，因此不管创建多少个对象，该静态变量在内存中有且仅有一个拷贝。静态变量可以实现多个对象共享内存")]),t._v(" "),v("li",[t._v("实例变量：属于某一实例，需要先创建对象，然后通过对象才能访问得到")])]),t._v(" "),v("h2",{attrs:{id:"三、包装类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、包装类"}},[t._v("#")]),t._v(" 三、包装类")]),t._v(" "),v("h3",{attrs:{id:"_3-1-integer-和-int-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-integer-和-int-的区别"}},[t._v("#")]),t._v(" 3.1 Integer 和 int 的区别？")]),t._v(" "),v("ol",[v("li",[t._v("int 是 Java 的⼋种基本数据类型之⼀，⽽ "),v("code",[t._v("Integer")]),t._v(" 是 Java 为 int 类型提供的封装类")]),t._v(" "),v("li",[t._v("int 型变量的默认值是 0，Integer 变量的默认值是 null，这⼀点说明 Integer 可以区分出未赋值和值为 0 的 区分")]),t._v(" "),v("li",[t._v("Integer 变量必须实例化后才可以使⽤，⽽ int 不需要。")])]),t._v(" "),v("h3",{attrs:{id:"_3-2-integer-之间的比较"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-integer-之间的比较"}},[t._v("#")]),t._v(" 3.2 Integer 之间的比较")]),t._v(" "),v("ol",[v("li",[t._v("两个 "),v("code",[t._v("new()")]),t._v(" 出来的 "),v("code",[t._v("Integer")]),t._v(" 进行比较：因为是两个对象，进行比较的其内存地址，结果均为 false")]),t._v(" "),v("li",[v("code",[t._v("Integer")]),t._v(" 和 "),v("code",[t._v("int")]),t._v(" 进行比较：包装类和基本数据类型进行比较时，会对包装类进行拆包装为基本数据类型，所以最后是两个 "),v("code",[t._v("int")]),t._v(" 在比较。只要数值相等就为 true")]),t._v(" "),v("li",[t._v("非new生成的 "),v("code",[t._v("Integer")]),t._v(" 和 "),v("code",[t._v("new integer()")]),t._v(" 进行比较：前者指向 Java 常量池中的对象、后者指向堆中的对象，内存地址不同，结果均为 false")]),t._v(" "),v("li",[t._v("两个非new生成的 "),v("code",[t._v("Integer")]),t._v(" 进行比较：如果数值相等并且变量值在 "),v("code",[t._v("[-128, 127]")]),t._v(" 之间，比较结果为 true，否则为 false。")])]),t._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" var0"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" var0 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" var0 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IntegerCache")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("high "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n\t\t"),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IntegerCache")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cache"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("var0 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var0"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br")])]),v("h3",{attrs:{id:"_3-3-包装类的常量池"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-包装类的常量池"}},[t._v("#")]),t._v(" 3.3 包装类的常量池")]),t._v(" "),v("p",[v("code",[t._v("Byte")]),t._v("、"),v("code",[t._v("Short")]),t._v("、"),v("code",[t._v("Integer")]),t._v("、"),v("code",[t._v("Long")]),t._v(" 这 4 种包装类默认创建了数值 "),v("strong",[t._v("[-128，127]")]),t._v(" 的相应类型的缓存数据，"),v("code",[t._v("Character")]),t._v(" 创建了数值在 "),v("strong",[t._v("[0,127]")]),t._v(" 范围的缓存数据，"),v("code",[t._v("Boolean")]),t._v(" 直接返回 "),v("code",[t._v("True")]),t._v(" or "),v("code",[t._v("False")]),t._v("。")]),t._v(" "),v("p",[t._v("解释来说呢，大概就是以上几种类型中，创建的对象大小在约定的范围之内，该对象会在cache中长生（如果已存在将会复用）。")]),t._v(" "),v("ul",[v("li",[t._v("节省内存空间：常量池中所有相同的对象常量被合并，只占用一个空间。")]),t._v(" "),v("li",[t._v("节省运行时间：比较字符串时，==比equals()快。对于两个引用变量，只用==判断引用是否相等，也就可以判断实际值是否相等。")])]),t._v(" "),v("h3",{attrs:{id:"_3-4-装箱和拆箱"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-装箱和拆箱"}},[t._v("#")]),t._v(" 3.4 装箱和拆箱")]),t._v(" "),v("p",[t._v("⾃动装箱是 Java 编译器在基本数据类型和对应得包装类之间做的⼀个转化。⽐如：把 int 转化成 Integer，double 转化成 Double 等等。反之就是⾃动拆箱。")]),t._v(" "),v("p",[t._v("原始类型：boolean、char、byte、short、int、long、float、double")]),t._v(" "),v("p",[t._v("封装类型：Boolean、Character、Byte、Short、Integer、Long、Float、Double")])])}),[],!1,null,null,null);a.default=s.exports},864:function(t,a,e){t.exports=e.p+"assets/img/5-1ZZZ91512493.7d6fd694.jpg"},865:function(t,a,e){t.exports=e.p+"assets/img/image-20220116180214826.391d4b8b.png"}}]);