(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{1108:function(a,t,v){"use strict";v.r(t);var _=v(1),s=Object(_.a)({},(function(){var a=this,t=a.$createElement,_=a._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("div",{staticClass:"custom-block warning"},[_("p",{staticClass:"custom-block-title"},[a._v("转载声明")]),a._v(" "),_("ul",[_("li",[a._v("《深入理解Java虚拟机》")])])]),a._v(" "),_("blockquote",[_("p",[a._v("Java 与 C++ 之间有一堵由内存动态分配和垃圾收集技术所围成的高墙，墙外面的人想进去，墙里面的人却想出来。")])]),a._v(" "),_("p",[_("img",{attrs:{src:v(903),alt:"image-20220317085056977",loading:"lazy"}})]),a._v(" "),_("h2",{attrs:{id:"一、程序计数器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、程序计数器"}},[a._v("#")]),a._v(" 一、程序计数器")]),a._v(" "),_("p",[a._v("程序计数器（Program Counter Register）是一块较小的内存空间，是 "),_("mark",[a._v("线程私有")]),a._v(" 的，它可以看作是 "),_("mark",[a._v("当前线程所执行的字节码的行号指示器。此内存区域是唯一一个在《Java虚拟机规范》中没有规定任何 "),_("code",[a._v("OutOfMemoryError")]),a._v(" 情况的区域")])]),a._v(" "),_("h2",{attrs:{id:"二、java-虚拟机栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、java-虚拟机栈"}},[a._v("#")]),a._v(" 二、Java 虚拟机栈")]),a._v(" "),_("p",[a._v("与程序计数器一样，Java 虚拟机栈（Java Virtual Machine Stack）也是 "),_("mark",[a._v("线程私有")]),a._v(" 的，它的生命周期与线程相同。虚拟机栈描述的是 Java 方法执行的线程内存模型：每个方法被执行的时候，Java 虚拟机都会同步创建一个 "),_("mark",[a._v("栈帧，用于存储局部变量表、操作数栈、动态连接、方法出口等信息")]),a._v(" 。每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。")]),a._v(" "),_("div",{staticClass:"custom-block note"},[_("p",{staticClass:"custom-block-title"},[a._v("局部变量表")]),a._v(" "),_("p",[a._v("存放了编译期可知的各种 Java 虚拟机基本数据类型、对象引用、returnAddress 类型（指向了一条字节码指令的地址）")])]),a._v(" "),_("div",{staticClass:"custom-block info"},[_("p",{staticClass:"custom-block-title"},[a._v("异常状况")]),a._v(" "),_("ul",[_("li",[a._v("如果线程请求的栈深度大于虚拟机所允许的深度，将抛出 "),_("code",[a._v("StackOverflowError")]),a._v(" 异常")]),a._v(" "),_("li",[a._v("如果 Java 虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出 "),_("code",[a._v("OutOfMemoryError")]),a._v(" 异常")])])]),a._v(" "),_("h2",{attrs:{id:"三、本地方法栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、本地方法栈"}},[a._v("#")]),a._v(" 三、本地方法栈")]),a._v(" "),_("p",[a._v("本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，都是 "),_("mark",[a._v("线程私有")]),a._v(" ，其区别只是虚拟机栈为虚拟机执行 Java 方法（也就是字节码）服务，而本地方法栈则是 "),_("mark",[a._v("为虚拟机使用到的本地（Native） 方法服务")])]),a._v(" "),_("div",{staticClass:"custom-block info"},[_("p",{staticClass:"custom-block-title"},[a._v("异常状况")]),a._v(" "),_("ul",[_("li",[a._v("如果线程请求的栈深度大于本地方法栈所允许的深度，将抛出 "),_("code",[a._v("StackOverflowError")]),a._v(" 异常")]),a._v(" "),_("li",[a._v("如果本地方法栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出 "),_("code",[a._v("OutOfMemoryError")]),a._v(" 异常")])])]),a._v(" "),_("h2",{attrs:{id:"四、java-堆"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、java-堆"}},[a._v("#")]),a._v(" 四、Java 堆")]),a._v(" "),_("p",[a._v("Java堆是被 "),_("mark",[a._v("所有线程共享")]),a._v(" 的一块内存区域，在 "),_("mark",[a._v("虚拟机启动时创建")]),a._v(" 。此内存区域的唯一目的就是 "),_("mark",[a._v("存放对象实例")]),a._v(" ，Java 世界里 "),_("mark",[a._v("“几乎”")]),a._v(" 所有的对象实例都在这里分配内存。")]),a._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[a._v("几乎")]),a._v(" "),_("p",[a._v("由于 "),_("strong",[a._v("即时编译技术")]),a._v(" 的进步，尤其是 "),_("strong",[a._v("逃逸分析技术")]),a._v(" 的日渐强大，"),_("strong",[a._v("栈上分配")]),a._v(" 、 "),_("strong",[a._v("标量替换优化手段")]),a._v(" 已经导致一些微妙的变化悄然发生，所以说 Java 对象实例都分配在堆上也渐渐变得不是那么绝对了")])]),a._v(" "),_("div",{staticClass:"custom-block info"},[_("p",{staticClass:"custom-block-title"},[a._v("异常状况")]),a._v(" "),_("p",[a._v("如果在 Java 堆中没有内存完成实例分配，并且堆也无法再 扩展时，Java 虚拟机将会抛出 "),_("code",[a._v("OutOfMemoryError")]),a._v(" 异常")])]),a._v(" "),_("h2",{attrs:{id:"五、方法区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#五、方法区"}},[a._v("#")]),a._v(" 五、方法区")]),a._v(" "),_("p",[a._v("方法区（Method Area）与 Java 堆一样，是各个 "),_("mark",[a._v("线程共享")]),a._v(" 的内存区域，它用于 "),_("mark",[a._v("存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据")])]),a._v(" "),_("p",[a._v("方法区中的内存挥手目标主要是针对常量池的挥手和类型的卸载，但是因为回收条件苛刻、回收效果不佳。")]),a._v(" "),_("div",{staticClass:"custom-block info"},[_("p",{staticClass:"custom-block-title"},[a._v("异常状况")]),a._v(" "),_("p",[a._v("如果方法区无法满足新的内存分配需求时，将抛出 "),_("code",[a._v("OutOfMemoryError")]),a._v(" 异常。")])]),a._v(" "),_("h2",{attrs:{id:"六、运行时常量池"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#六、运行时常量池"}},[a._v("#")]),a._v(" 六、运行时常量池")]),a._v(" "),_("p",[a._v("运行时常量池（Runtime Constant Pool）是 "),_("mark",[a._v("方法区的一部分")])]),a._v(" "),_("p",[a._v("Class文件中除了有类的版本、字 段、方法、接口等描述信息外，还有一项信息是 "),_("strong",[a._v("常量池表")]),a._v(" （Constant Pool Table），用于 "),_("mark",[a._v("存放编译期生成的各种字面量与符号引用")]),a._v(" ，这部分内容将在类加载后存放到方法区的运行时常量池中。")]),a._v(" "),_("p",[a._v("运行时常量池相对于 Class 文件常量池的另外一个重要特征是具备 "),_("strong",[a._v("动态性")]),a._v(" ，Java 语言并不要求常量 一定只有编译期才能产生，也就是说，并非预置入 Class 文件中常量池的内容才能进入方法区运行时常量池，运行期间也可以将新的常量放入池中，这种特性被开发人员利用得比较多的便是 String 类的 intern() 方法。")]),a._v(" "),_("blockquote",[_("p",[a._v("参考 "),_("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1690589",target:"_blank",rel:"noopener noreferrer"}},[a._v("面试题系列第5篇：JDK的运行时常量池、字符串常量池、静态常量池，还傻傻分不清？"),_("OutboundLink")],1)])]),a._v(" "),_("div",{staticClass:"custom-block info"},[_("p",{staticClass:"custom-block-title"},[a._v("异常状况")]),a._v(" "),_("p",[a._v("当常量池无法再申请到内存 时会抛出 "),_("code",[a._v("OutOfMemoryError")]),a._v(" 异常")])]),a._v(" "),_("h2",{attrs:{id:"七、直接内存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#七、直接内存"}},[a._v("#")]),a._v(" 七、直接内存")]),a._v(" "),_("p",[a._v("直接内存（Direct Memory） "),_("mark",[a._v("并不是虚拟机运行时数据区的一部分")]),a._v(" ，也不是《Java虚拟机规范》中 定义的内存区域。但是这部分内存也被频繁地使用，而且也可能导致 "),_("code",[a._v("OutOfMemoryError")]),a._v(" 异常出现，")])])}),[],!1,null,null,null);t.default=s.exports},903:function(a,t,v){a.exports=v.p+"assets/img/image-20220317085056977.07852a49.png"}}]);