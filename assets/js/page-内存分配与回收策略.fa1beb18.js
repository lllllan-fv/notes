(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{1115:function(v,t,r){"use strict";r.r(t);var a=r(1),o=Object(a.a)({},(function(){var v=this,t=v.$createElement,r=v._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[r("div",{staticClass:"custom-block warning"},[r("p",{staticClass:"custom-block-title"},[v._v("转载声明")]),v._v(" "),r("ul",[r("li",[v._v("《深入理解Java虚拟机》")])])]),v._v(" "),r("p",[v._v("Java技术体系的自动内存管理，最根本的目标是自动化地解决两个问题："),r("mark",[v._v("自动给对象分配内存")]),v._v(" 以及 "),r("mark",[v._v("自动回收分配给对象的内存")])]),v._v(" "),r("div",{staticClass:"custom-block info"},[r("p",{staticClass:"custom-block-title"},[v._v("对象的内存分配")]),v._v(" "),r("p",[v._v("从概念上讲，应该都是在堆上分配。而实际上也有可能经过即时编译后被拆散成标量类型并间接在栈上分配。")])]),v._v(" "),r("p",[v._v("在经典分代的设计下，新生对象通常会分配在新生代中，少数情况下（例如对象大小超过一定阈值）也可能会直接分配在老年代。")]),v._v(" "),r("p",[v._v("对象分配的规则并不是固定的， 《Java虚拟机规范》并未规定新对象的创建和存储细节，这取决于虚拟机当前使用的是哪一种垃圾收集器，以及虚拟机中与内存相关的参数的设定。")]),v._v(" "),r("h2",{attrs:{id:"一、对象优先在eden分配"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、对象优先在eden分配"}},[v._v("#")]),v._v(" 一、对象优先在Eden分配")]),v._v(" "),r("p",[v._v("大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。")]),v._v(" "),r("h2",{attrs:{id:"二、大对象直接进入老年代"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、大对象直接进入老年代"}},[v._v("#")]),v._v(" 二、大对象直接进入老年代")]),v._v(" "),r("p",[v._v("在Java虚拟机中要避免大对象的原因是，在分配空间时，它容易导致内存明明还有不少空间时就提前触发垃圾收集，以获取足够的连续空间才能安置好它们，而当复制对象时，大对象就意味着高额的内存复制开销。")]),v._v(" "),r("p",[v._v("HotSpot虚拟机提供了 "),r("code",[v._v("-XX：PretenureSizeThreshold")]),v._v(" 参数，指定大于该设置值的对象直接在老年代分配，这样做的目的就是避免在Eden区及两个Survivor区之间来回复制，产生大量的内存复制操作。")]),v._v(" "),r("h2",{attrs:{id:"三、长期存活的对象将进入老年代"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、长期存活的对象将进入老年代"}},[v._v("#")]),v._v(" 三、长期存活的对象将进入老年代")]),v._v(" "),r("p",[v._v("HotSpot虚拟机中多数收集器都采用了分代收集来管理堆内存，那内存回收时就必须能决策哪些存活对象应当放在新生代，哪些存活对象放在老年代中。虚拟机给每个对象定义了一个对象年龄（Age）计数器，存储在对象头中")]),v._v(" "),r("p",[v._v("对象通常在Eden区里诞生，如果经过第一次 Minor GC后仍然存活，并且能被Survivor容纳的话，该对象会被移动到Survivor空间中，并且将其对象 年龄设为1岁。对象在Survivor区中每熬过一次Minor GC，年龄就增加1岁，当它的年龄增加到一定程 度（默认为15），就会被晋升到老年代中。对象晋升老年代的年龄阈值，可以通过参数 "),r("code",[v._v("-XX： MaxTenuringThreshold")]),v._v(" 设置。")]),v._v(" "),r("h2",{attrs:{id:"四、动态对象年龄判定"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、动态对象年龄判定"}},[v._v("#")]),v._v(" 四、动态对象年龄判定")]),v._v(" "),r("p",[v._v("为了能更好地适应不同程序的内存状况，HotSpot虚拟机并不是永远要求对象的年龄必须达到 "),r("code",[v._v("-XX：MaxTenuringThreshold")]),v._v(" 才能晋升老年代，如果在Survivor空间中相同年龄所有对象大小的总和大于 Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到 "),r("code",[v._v("-XX： MaxTenuringThreshold")]),v._v(" 中要求的年龄。")]),v._v(" "),r("h2",{attrs:{id:"五、空间分配担保"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#五、空间分配担保"}},[v._v("#")]),v._v(" 五、空间分配担保")]),v._v(" "),r("p",[v._v("在发生Minor GC之前，虚拟机必须先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那这一次Minor GC可以确保是安全的。")]),v._v(" "),r("p",[v._v("如果不成立，则虚拟机会先查看 "),r("code",[v._v("-XX：HandlePromotionFailure")]),v._v(" 参数的设置值是否允许担保失败（Handle Promotion Failure）；如果允许，那会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者 "),r("code",[v._v("-XX： HandlePromotionFailure")]),v._v(" 设置不允许冒险，那这时就要改为进行一次Full GC。")]),v._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[v._v("冒险")]),v._v(" "),r("p",[v._v("前面提到过，新生代使用复制收集算法，但为了内存利用率， 只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况 ——最极端的情况就是内存回收后新生代中所有对象都存活，需要老年代进行分配担保，把Survivor无 法容纳的对象直接送入老年代，这与生活中贷款担保类似。老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，但一共有多少对象会在这次回收中活下来在实际完成内存回收之 前是无法明确知道的，所以只能取之前每一次回收晋升到老年代对象容量的平均大小作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。")]),v._v(" "),r("p",[v._v("取历史平均值来比较其实仍然是一种赌概率的解决办法，也就是说假如某次Minor GC存活后的对 象突增，远远高于历史平均值的话，依然会导致担保失败。如果出现了担保失败，那就只好老老实实地重新发起一次Full GC，这样停顿时间就很长了。虽然担保失败时绕的圈子是最大的，但通常情况下 都还是会将 "),r("code",[v._v("-XX：HandlePromotionFailure")]),v._v("开关打开，避免Full GC过于频繁。")])])])}),[],!1,null,null,null);t.default=o.exports}}]);