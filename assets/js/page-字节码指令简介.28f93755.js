(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{1118:function(v,_,l){"use strict";l.r(_);var t=l(1),o=Object(t.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("div",{staticClass:"custom-block warning"},[l("p",{staticClass:"custom-block-title"},[v._v("转载声明")]),v._v(" "),l("ul",[l("li",[v._v("《深入理解Java虚拟机》")])])]),v._v(" "),l("p",[v._v("Java 虚拟机的指令由一个字节长度的、代表着某种特定操作含义的数字（操作码，Opcode）以及跟随其后的零至多个代表此操作所需的参数（操作数，Operand）构成。")]),v._v(" "),l("p",[l("strong",[v._v("优点：")])]),v._v(" "),l("ol",[l("li",[v._v("放弃了操作数长度对齐，就意味着可以省略掉大量的填充和间隔字符")]),v._v(" "),l("li",[v._v("用一个字节来代表操作码，也是为了尽可能获得短小精干的编译代码")])]),v._v(" "),l("p",[l("strong",[v._v("缺点：")])]),v._v(" "),l("ol",[l("li",[v._v("操作码的长度为一个字节，意味着指令集的操作码总数不能超过256")]),v._v(" "),l("li",[v._v("由于 Class 文件格式放弃了编译后代码的操作数长度对齐，意味着虚拟机在处理超过一个字节的数据时，不得不在运行时从字节中重建出具体数据的结构")])]),v._v(" "),l("div",{staticClass:"custom-block info"},[l("p",{staticClass:"custom-block-title"},[v._v("字节码和数据类型")]),v._v(" "),l("p",[v._v("因为Java虚拟机的操作码长度只有一字节，所以包含了数据类型的操作码就为指令集的设计带来了很大的压力：如果每一种与数据类型相关的指令都支持Java虚拟机所有运行时数据类型的话，那么指令的数量恐怕就会超出一字节所能表示的数量范围了。因此，"),l("strong",[v._v("Java虚拟机的指令集对于特定的操作只提供了有限的类型相关指令去支持它，换句话说，指令集将会被故意设计成非完全独立的。")])])]),v._v(" "),l("ol",[l("li",[l("p",[v._v("加载和存储指令")]),v._v(" "),l("blockquote",[l("p",[v._v("加载和存储指令用于将数据在栈帧中的局部变量表和操作数栈之间来回传输")])])]),v._v(" "),l("li",[l("p",[v._v("运算指令")]),v._v(" "),l("blockquote",[l("p",[v._v("算术指令用于对两个操作数栈上的值进行某种特定运算，并把结果重新存入到操作栈顶。")])])]),v._v(" "),l("li",[l("p",[v._v("类型转换指令")]),v._v(" "),l("blockquote",[l("p",[v._v("类型转换指令可以将两种不同的数值类型相互转换。")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("Java 虚拟机直接支持（即转换时无须显式的转换指令）数值类型的宽化类型转换（即小范围类型转向大范围类型的安全转换）")])]),v._v(" "),l("li",[l("p",[v._v("处理窄化类型转换时就必须显式地使用转换指令来完成")])])])])]),v._v(" "),l("li",[l("p",[v._v("对象创建与访问指令")]),v._v(" "),l("blockquote",[l("p",[v._v("虽然类实例和数组都是对象，但Java虚拟机对类实例和数组的创建与操作使用了不同的字节码指令。对象创建后，就可以通过对象访问指令获取对象实例或者数组实例中的字段或者数组元素")])])]),v._v(" "),l("li",[l("p",[v._v("操作数栈管理指令")]),v._v(" "),l("blockquote",[l("p",[v._v("如同操作一个普通数据结构中的堆栈那样，Java虚拟机提供了一些用于直接操作操作数栈的指令")])])]),v._v(" "),l("li",[l("p",[v._v("控制转移指令")]),v._v(" "),l("blockquote",[l("p",[v._v("控制转移指令可以让Java虚拟机有条件或无条件地从指定位置指令（而不是控制转移指令）的下一条指令继续执行程序，从概念模型上理解，可以认为控制指令就是在有条件或无条件地修改PC寄存器的值。")])])]),v._v(" "),l("li",[l("p",[v._v("方法调用和返回指令")]),v._v(" "),l("blockquote",[l("p",[v._v("方法调用指令与数据类型无关，而方法返回指令是根据返回值的类型区分的")])])]),v._v(" "),l("li",[l("p",[v._v("异常处理指令")]),v._v(" "),l("blockquote",[l("p",[v._v("而在Java虚拟机中，处理异常（catch语句）不是由字节码指令来实现的（很久之前曾经使用jsr和 ret指令来实现，现在已经不用了），而是采用异常表来完成")])])]),v._v(" "),l("li",[l("p",[v._v("同步指令")]),v._v(" "),l("blockquote",[l("p",[v._v("Java虚拟机可以支持方法级的同步和方法内部一段指令序列的同步，这两种同步结构都是使用 "),l("mark",[v._v("管程")]),v._v(" （Monitor，更常见的是直接将它称为“锁”）来实现的")])])])])])}),[],!1,null,null,null);_.default=o.exports}}]);