(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{1024:function(_,t,v){"use strict";v.r(t);var a=v(1),r=Object(a.a)({},(function(){var _=this,t=_.$createElement,a=_._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[_._v("转载声明")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://javaguide.cn/home.html#%E5%BF%85%E7%9C%8B%E4%B8%93%E6%A0%8F",target:"_blank",rel:"noopener noreferrer"}},[_._v("JavaGuide（Java学习&&面试指南） | JavaGuide"),a("OutboundLink")],1)]),_._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6942686874301857800#heading-1",target:"_blank",rel:"noopener noreferrer"}},[_._v("2021-Java后端工程师必会知识点-(操作系统) - 掘金 (juejin.cn)"),a("OutboundLink")],1)]),_._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/ibless/article/details/81275009",target:"_blank",rel:"noopener noreferrer"}},[_._v("为什么使用多级页表？_ibless的博客-CSDN博客_多级页表的好处"),a("OutboundLink")],1)])])]),_._v(" "),a("p",[a("a",{attrs:{href:"http://blog.lllllan.cn/cs-basic/os/wangdao/3/1/",target:"_blank",rel:"noopener noreferrer"}},[_._v("内存管理概念 | lllllan"),a("OutboundLink")],1)]),_._v(" "),a("h2",{attrs:{id:"内存管理介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存管理介绍"}},[_._v("#")]),_._v(" 内存管理介绍")]),_._v(" "),a("ul",[a("li",[_._v("内存空间的分配与回收")]),_._v(" "),a("li",[_._v("地址转换：把逻辑地址转换成相应的物理地址")]),_._v(" "),a("li",[_._v("内存空间的扩充：利用虚拟技术或自动覆盖技术，从逻辑上扩充内存")]),_._v(" "),a("li",[_._v("存储保护：保证各道作业在各自的存储空间内运行，互不干扰")])]),_._v(" "),a("h2",{attrs:{id:"内存分配机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存分配机制"}},[_._v("#")]),_._v(" 内存分配机制")]),_._v(" "),a("p",[_._v("简单分为 "),a("strong",[_._v("连续分配管理方式")]),_._v(" 和 "),a("strong",[_._v("非连续分配管理方式")]),_._v(" 两种。")]),_._v(" "),a("ul",[a("li",[_._v("连续分配管理方式是指为一个用户程序分配一个连续的内存空间，常见的如 "),a("u",[_._v("块式管理")])]),_._v(" "),a("li",[_._v("非连续分配管理方式允许一个程序使用的内存分布在离散或者说不相邻的内存中，常见的如 "),a("u",[_._v("页式管理")]),_._v("、"),a("u",[_._v("段式管理")]),_._v("、"),a("u",[_._v("段页式管理")])])]),_._v(" "),a("ol",[a("li",[a("strong",[_._v("块式管理：")]),_._v(" 将内存分为几个固定大小的块，每个块中只包含一个进程。如果程序运行需要内存的话，操作系统就会分配给它一块，如果程序运行只需要很小的空间的话，块中其余的部分将会被浪费。")]),_._v(" "),a("li",[a("strong",[_._v("页式管理：")]),_._v(" 把主存分为大小相等的一页一页的形式，页较小，相对比块式管理的划分力度更大，提高了内存利用率，减少了碎片（块中没有被利用的空间）。页式管理通过页表对应逻辑地址和物理地址")]),_._v(" "),a("li",[a("strong",[_._v("段式管理：")]),_._v(" 段式管理把主存分为一段段的，每个段定义了一组逻辑信息，例如有主程序的 Main、子程序段 X、数据段 D 及栈段 S 等。段式管理通过段表对应逻辑地址和物理地址，相对于页式管理赋予了段的实际意义。")]),_._v(" "),a("li",[a("strong",[_._v("段页式管理：")]),_._v(" 把主存分成若干段，每个段分成若干页，结合了段式管理和页式管理的优点。")])]),_._v(" "),a("h2",{attrs:{id:"快表和多级页表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快表和多级页表"}},[_._v("#")]),_._v(" 快表和多级页表")]),_._v(" "),a("h3",{attrs:{id:"快表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快表"}},[_._v("#")]),_._v(" 快表")]),_._v(" "),a("p",[_._v("为了解决虚拟地址到物理地址的转换速度，操作系统在页表方案基础上引入了快表来加速虚拟地址到物理地址的转换。我们可以把快表理解为一种特殊的 "),a("mark",[_._v("高速缓冲存储器（Cache）")]),_._v(" ，其中的内容是页表的一部分或者全部内容。作为页表的 Cache，它的作用与页表相似，但是提高了访问速率。由于采用页表做地址转换，读写内存数据 CPU 要访问两次主存。有了快表，有时只要访问一次告诉缓冲存储区，一次主存，这样可以加速查找并提高指令执行速度。")]),_._v(" "),a("p",[a("a",{attrs:{href:"http://blog.lllllan.cn/cs-basic/os/wangdao/3/2/#_2-3-%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A2%E6%9C%BA%E6%9E%84",target:"_blank",rel:"noopener noreferrer"}},[_._v("虚拟内存管理 | lllllan"),a("OutboundLink")],1)]),_._v(" "),a("ol",[a("li",[_._v("根据虚拟地址中的页号查快表")]),_._v(" "),a("li",[_._v("如果该页在快表中，直接从快表中读取相应的物理地址")]),_._v(" "),a("li",[_._v("如果该页不在快表中，就访问内存中的页表，再从页表中得到物理地址，同时将该映射添加到快表中")]),_._v(" "),a("li",[_._v("当快表填满后，新添加时会按照一定的淘汰策略淘汰掉快表中的一页")])]),_._v(" "),a("h3",{attrs:{id:"多级页表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多级页表"}},[_._v("#")]),_._v(" 多级页表")]),_._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/ibless/article/details/81275009",target:"_blank",rel:"noopener noreferrer"}},[_._v("为什么使用多级页表？_ibless的博客-CSDN博客_多级页表的好处"),a("OutboundLink")],1)]),_._v(" "),a("ul",[a("li",[_._v("多级页表可以离散地存储页表。页帧可以离散，是因为有页表记录它们存在的位置。一级页表必须连续，当页帧较多的时候则需要占用较大的连续空间。使用多级页表可以离散地存储页表，通过某一级的页表记录下一级页表的存储位置。通过时间换取空间。")]),_._v(" "),a("li",[_._v("在虚拟存储技术中，可以节省页表的占用空间。因为局部性原理，暂时用不到的信息不会写到内存中，页表中就可以少一些记录。")])]),_._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),a("p",[_._v("为了提高内存的空间性能，提出了多级页表的概念；但是提到空间性能是以浪费时间性能为基础的，因此为了补充损失的时间性能，提出了快表的概念。")]),_._v(" "),a("h2",{attrs:{id:"分页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分页"}},[_._v("#")]),_._v(" 分页")]),_._v(" "),a("p",[_._v("把内存空间划分为"),a("strong",[_._v("大小相等且固定的块")]),_._v("，作为主存的基本单位。因为程序数据存储在不同的页面中，而页面又离散的分布在内存中，"),a("strong",[_._v("因此需要一个页表来记录映射关系，以实现从页号到物理块号的映射。")])]),_._v(" "),a("p",[_._v("访问分页系统中内存数据需要"),a("strong",[_._v("两次的内存访问")]),_._v(" (一次是从内存中访问页表，从中找到指定的物理块号，加上页内偏移得到实际物理地址；第二次就是根据第一次得到的物理地址访问内存取出数据)。")]),_._v(" "),a("p",[a("img",{attrs:{src:v(538),alt:"",loading:"lazy"}})]),_._v(" "),a("h2",{attrs:{id:"分段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分段"}},[_._v("#")]),_._v(" 分段")]),_._v(" "),a("p",[a("strong",[_._v("分页是为了提高内存利用率，而分段是为了满足程序员在编写代码的时候的一些逻辑需求(比如数据共享，数据保护，动态链接等)。")])]),_._v(" "),a("p",[_._v("分段内存管理当中，"),a("strong",[_._v("地址是二维的，一维是段号，二维是段内地址；其中每个段的长度是不一样的，而且每个段内部都是从0开始编址的")]),_._v("。由于分段管理中，每个段内部是连续内存分配，但是段和段之间是离散分配的，因此也存在一个逻辑地址到物理地址的映射关系，相应的就是段表机制。")]),_._v(" "),a("p",[a("img",{attrs:{src:v(539),alt:"",loading:"lazy"}})]),_._v(" "),a("h2",{attrs:{id:"分页和分段的异同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分页和分段的异同"}},[_._v("#")]),_._v(" 分页和分段的异同")]),_._v(" "),a("p",[a("strong",[_._v("共同点：")])]),_._v(" "),a("ul",[a("li",[_._v("都是为了提高内存利用率，减少内存碎片")]),_._v(" "),a("li",[_._v("都是离散分配内存的方式，但页和段中的内存都是连续的")])]),_._v(" "),a("p",[a("strong",[_._v("区别：")])]),_._v(" "),a("ul",[a("li",[_._v("页的大小是固定的，由操作系统决定；段的大小是不固定的，取决于当前运行的程序")]),_._v(" "),a("li",[_._v("分页仅仅是为了满足操作系统内存管理的需求；段是逻辑信息的单位，在程序中可以体现为代码段、数据段，能够更好满足用户的需求")]),_._v(" "),a("li",[_._v("分页主要用于实现虚拟内存，从而获得更大的地址空间；分段主要是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护。")])]),_._v(" "),a("h2",{attrs:{id:"逻辑地址和物理地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑地址和物理地址"}},[_._v("#")]),_._v(" 逻辑地址和物理地址")]),_._v(" "),a("p",[_._v("比如在 C 语言中，指针里面存储的数值就可以理解成为内存里的一个地址，这个地址也就是我们说的逻辑地址，逻辑地址由操作系统决定。物理地址指的是真实物理内存中地址，更具体一点来说就是内存地址寄存器中的地址。物理地址是内存单元真正的地址")]),_._v(" "),a("h2",{attrs:{id:"cpu-寻址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu-寻址"}},[_._v("#")]),_._v(" CPU 寻址")]),_._v(" "),a("p",[_._v("现代处理器使用的是 "),a("strong",[_._v("虚拟寻址")]),_._v(" 的方式。"),a("strong",[_._v("使用虚拟寻址，CPU需要将虚拟地址翻译成物理地址，这样才能访问到真实的物理内存。")]),_._v(" 实际上完成虚拟地址转换为物理地址的硬件是 CPU 中的 "),a("strong",[_._v("内存管理单元")])]),_._v(" "),a("div",{staticClass:"custom-block info"},[a("p",{staticClass:"custom-block-title"},[_._v("为什么要有虚拟地址空间？")]),_._v(" "),a("p",[_._v("在没有虚拟地址的时候，程序都是直接访问和操作物理内存的，存在以下问题：")]),_._v(" "),a("ol",[a("li",[_._v("用户程序可以访问任意内存，寻址内存的每个字节，这样就很容易（有意或者无意）破坏操作系统，造成操作系统崩溃")]),_._v(" "),a("li",[_._v("想要同时运行多个程序特别困难，困难会发生多个程序同时修改同个内存地址上的内容，从而导致程序的崩溃")])]),_._v(" "),a("p",[a("strong",[_._v("如果直接把物理地址暴露出来的话会带来严重问题，可能会对操作系统和程序造成伤害和困难")])]),_._v(" "),a("p",[_._v("通过虚拟地址访问内存有以下优势：")]),_._v(" "),a("ol",[a("li",[_._v("程序可以使用一系列相邻的虚拟地址来访问物理内存中不相邻的大内存缓冲区")]),_._v(" "),a("li",[_._v("程序可以使用一系列虚拟地址访问大于可用物理内存的内存缓冲区。当物理内存的供应量变小时，内存管理器会将物理内存页保存到磁盘文件。数据或代码也会根据需要在物理内存与磁盘之间移动")]),_._v(" "),a("li",[_._v("不同进程使用的虚拟地址彼此隔离。一个进程中的代码无法更改正在由另一进程或操作系统使用的物理内存")])])]),_._v(" "),a("h2",{attrs:{id:"覆盖于交换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#覆盖于交换"}},[_._v("#")]),_._v(" 覆盖于交换")]),_._v(" "),a("p",[a("a",{attrs:{href:"http://blog.lllllan.cn/cs-basic/os/wangdao/3/1/#%E4%BA%8C%E3%80%81%E8%A6%86%E7%9B%96%E4%B8%8E%E4%BA%A4%E6%8D%A2",target:"_blank",rel:"noopener noreferrer"}},[_._v("内存管理概念 | lllllan"),a("OutboundLink")],1)]),_._v(" "),a("p",[_._v("交换技术主要在不同进程(或作业)之间进行，而覆盖则用于同一个程序或进程中")]),_._v(" "),a("h2",{attrs:{id:"物理地址、逻辑地址、有效地址、线性地址、虚拟地址的区别-▲"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#物理地址、逻辑地址、有效地址、线性地址、虚拟地址的区别-▲"}},[_._v("#")]),_._v(" 物理地址、逻辑地址、有效地址、线性地址、虚拟地址的区别 ▲")]),_._v(" "),a("p",[a("mark",[_._v("物理地址")]),_._v(" 就是内存中真正的地址，具有唯一性。"),a("strong",[_._v("不管哪种地址，最终都会映射为物理地址")]),_._v("。")]),_._v(" "),a("p",[_._v("在"),a("code",[_._v("实模式")]),_._v("下，段基址 + 段内偏移经过地址加法器的处理，经过地址总线传输，最终也会转换为"),a("code",[_._v("物理地址")]),_._v("。")]),_._v(" "),a("p",[_._v("但是在 "),a("code",[_._v("保护模式")]),_._v(" 下，段基址 + 段内偏移被称为 "),a("mark",[_._v("线性地址")]),_._v(" ，不过此时的段基址不能称为真正的地址，而是会被称作为一个 "),a("code",[_._v("选择子")]),_._v(" 的东西，选择子就是个索引，相当于数组的下标，通过这个索引能够在 GDT 中找到相应的段描述符，段描述符记录了"),a("strong",[_._v("段的起始、段的大小")]),_._v("等信息，这样便得到了基地址。如果此时没有开启内存分页功能，那么这个线性地址可以直接当做物理地址来使用，直接访问内存。如果开启了分页功能，那么这个线性地址又多了一个名字，这个名字就是 "),a("mark",[_._v("虚拟地址")])]),_._v(" "),a("p",[_._v("不论在实模式还是保护模式下，段内偏移地址都叫做 "),a("mark",[_._v("有效地址")]),_._v(" 也是 "),a("mark",[_._v("逻辑地址")])]),_._v(" "),a("p",[_._v("线性地址可以看作是"),a("code",[_._v("虚拟地址")]),_._v("，虚拟地址不是真正的物理地址，但是虚拟地址会最终被映射为物理地址。下面是虚拟地址 -> 物理地址的映射。")]),_._v(" "),a("p",[a("img",{attrs:{src:v(540),alt:"image-20210807152300643",loading:"lazy"}})])])}),[],!1,null,null,null);t.default=r.exports},538:function(_,t,v){_.exports=v.p+"assets/img/image-20210610173249387.77e2da59.png"},539:function(_,t,v){_.exports=v.p+"assets/img/image-20210610173410509.ca9c4e73.png"},540:function(_,t,v){_.exports=v.p+"assets/img/image-20210807152300643.cb2efe8c.png"}}]);