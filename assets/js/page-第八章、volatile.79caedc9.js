(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{1085:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[s._v("转载声明")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/RedSpider1/concurrent/tree/develop/article/02/8.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("深入浅出多线程 - 第八章 - GitHub"),n("OutboundLink")],1)])])]),s._v(" "),n("h2",{attrs:{id:"一、基本概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、基本概念"}},[s._v("#")]),s._v(" 一、基本概念")]),s._v(" "),n("h3",{attrs:{id:"_1-1-内存可见性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-内存可见性"}},[s._v("#")]),s._v(" 1.1 内存可见性")]),s._v(" "),n("p",[s._v("在 Java 内存模型那一章我们介绍了 JMM 有一个主内存，每个线程有自己私有的工作内存，工作内存中保存了一些变量在主内存的拷贝。")]),s._v(" "),n("p",[n("strong",[s._v("内存可见性，指的是线程之间的可见性，当一个线程修改了共享变量时，另一个线程可以读取到这个修改后的值")]),s._v("。")]),s._v(" "),n("h3",{attrs:{id:"_1-2-重排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-重排序"}},[s._v("#")]),s._v(" 1.2 重排序")]),s._v(" "),n("p",[s._v("为优化程序性能，对原有的指令执行顺序进行优化重新排序。重排序可能发生在多个阶段，比如编译重排序、CPU重排序等。")]),s._v(" "),n("h3",{attrs:{id:"_1-3-happens-before规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-happens-before规则"}},[s._v("#")]),s._v(" 1.3 happens-before规则")]),s._v(" "),n("p",[s._v("是一个给程序员使用的规则，只要程序员在写代码的时候遵循 happens-before 规则，JVM就能保证指令在多线程之间的顺序性符合程序员的预期。")]),s._v(" "),n("h2",{attrs:{id:"二、volatile的内存语义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、volatile的内存语义"}},[s._v("#")]),s._v(" 二、volatile的内存语义")]),s._v(" "),n("div",{staticClass:"custom-block info"},[n("p",{staticClass:"custom-block-title"},[s._v("volatile 主要功能：")]),s._v(" "),n("ul",[n("li",[s._v("保证变量的 "),n("strong",[s._v("内存可见性")])]),s._v(" "),n("li",[s._v("禁止 volatile 变量与普通变量 "),n("strong",[s._v("重排序")]),s._v("（JSR133提出，Java 5 开始才有这个“增强的volatile内存语义”）")])])]),s._v(" "),n("h3",{attrs:{id:"_2-1-内存可见性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-内存可见性"}},[s._v("#")]),s._v(" 2.1 内存可见性")]),s._v(" "),n("p",[s._v("以一段示例代码开始：")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("VolatileExample")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" flag "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("writer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// step 1")]),s._v("\n        flag "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// step 2")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("reader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// step 3")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// step 4")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("在这段代码里，我们使用 "),n("code",[s._v("volatile")]),s._v(" 关键字修饰了一个 "),n("code",[s._v("boolean")]),s._v(" 类型的变量 "),n("code",[s._v("flag")]),s._v("。")]),s._v(" "),n("p",[s._v("所谓内存可见性，指的是当一个线程对 "),n("code",[s._v("volatile")]),s._v(" 修饰的变量进行 "),n("strong",[s._v("写操作")]),s._v("（比如step 2）时，JMM 会立即把该线程对应的本地内存中的共享变量的值刷新到主内存；当一个线程对 "),n("code",[s._v("volatile")]),s._v(" 修饰的变量进行 "),n("strong",[s._v("读操作")]),s._v("（比如step 3）时，JMM会把立即该线程对应的本地内存置为无效，从主内存中读取共享变量的值。")]),s._v(" "),n("blockquote",[n("p",[s._v("在这一点上，volatile与锁具有相同的内存效果，volatile变量的写和锁的释放具有相同的内存语义，volatile变量的读和锁的获取具有相同的内存语义。")])]),s._v(" "),n("p",[s._v("假设在时间线上，线程 A 先执行方法 "),n("code",[s._v("writer")]),s._v(" 方法，线程 B 后执行 "),n("code",[s._v("reader")]),s._v(" 方法。那必然会有下图：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(874),alt:"volatile内存示意图",loading:"lazy"}})]),s._v(" "),n("p",[s._v("而如果 "),n("code",[s._v("flag")]),s._v(" 变量 "),n("strong",[s._v("没有")]),s._v(" 用 "),n("code",[s._v("volatile")]),s._v(" 修饰，在 step 2，线程 A 的本地内存里面的变量就不会立即更新到主内存，那随后线程B也同样不会去主内存拿最新的值，仍然使用线程B本地内存缓存的变量的值 "),n("code",[s._v("a = 0，flag = false")]),s._v("。")]),s._v(" "),n("h3",{attrs:{id:"_2-2-禁止重排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-禁止重排序"}},[s._v("#")]),s._v(" 2.2 禁止重排序")]),s._v(" "),n("p",[s._v("在JSR-133之前的旧的Java内存模型中，是允许 volatile 变量与普通变量重排序的。那上面的案例中，可能就会被重排序成下列时序来执行：")]),s._v(" "),n("ol",[n("li",[s._v("线程 A 写 volatile 变量，step 2，设置 flag 为 true；")]),s._v(" "),n("li",[s._v("线程 B 读同一个 volatile，step 3，读取到 flag 为 true；")]),s._v(" "),n("li",[s._v("线程 B 读普通变量，step 4，读取到 a = 0；")]),s._v(" "),n("li",[s._v("线程 A 修改普通变量，step 1，设置 a = 1；")])]),s._v(" "),n("p",[s._v("可见，如果 volatile 变量与普通变量发生了重排序，虽然 volatile 变量能保证内存可见性，也可能导致普通变量读取错误。")]),s._v(" "),n("p",[s._v("所以在旧的内存模型中，volatile 的【写-读】就不能与锁的【释放-获取】具有相同的内存语义了。为了提供一种比锁更轻量级的 "),n("strong",[s._v("线程间的通信机制")]),s._v("，"),n("strong",[s._v("JSR-133")]),s._v(" 专家组决定增强volatile的内存语义：严格限制编译器和处理器对volatile变量与普通变量的重排序。")]),s._v(" "),n("p",[s._v("编译器还好说，JVM 是怎么还能限制处理器的重排序的呢？它是通过 "),n("strong",[s._v("内存屏障")]),s._v(" 来实现的。")]),s._v(" "),n("div",{staticClass:"custom-block info"},[n("p",{staticClass:"custom-block-title"},[s._v("内存屏障")]),s._v(" "),n("p",[s._v("硬件层面，内存屏障分两种：读屏障（Load Barrier）和写屏障（Store Barrier）。内存屏障有两个作用：")]),s._v(" "),n("ol",[n("li",[s._v("阻止屏障两侧的指令重排序；")]),s._v(" "),n("li",[s._v("强制把写缓冲区/高速缓存中的脏数据等写回主内存，或者让缓存中相应的数据失效。")])]),s._v(" "),n("blockquote",[n("p",[s._v("注意这里的缓存主要指的是CPU缓存，如L1，L2等")])])]),s._v(" "),n("p",[s._v("编译器在"),n("strong",[s._v("生成字节码时")]),s._v("，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。编译器选择了一个"),n("strong",[s._v("比较保守的JMM内存屏障插入策略")]),s._v("，这样可以保证在任何处理器平台，任何程序中都能得到正确的volatile内存语义。这个策略是：")]),s._v(" "),n("ul",[n("li",[s._v("在每个volatile写操作前插入一个StoreStore屏障；")]),s._v(" "),n("li",[s._v("在每个volatile写操作后插入一个StoreLoad屏障；")]),s._v(" "),n("li",[s._v("在每个volatile读操作后插入一个LoadLoad屏障；")]),s._v(" "),n("li",[s._v("在每个volatile读操作后再插入一个LoadStore屏障。")])]),s._v(" "),n("p",[s._v("大概示意图是这个样子：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(875),alt:"内存屏障",loading:"lazy"}})]),s._v(" "),n("blockquote",[n("p",[s._v("再逐个解释一下这几个屏障。注：下述Load代表读操作，Store代表写操作")]),s._v(" "),n("p",[n("strong",[s._v("LoadLoad屏障")]),s._v("：对于这样的语句Load1; LoadLoad; Load2，在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。\n"),n("strong",[s._v("StoreStore屏障")]),s._v("：对于这样的语句Store1; StoreStore; Store2，在Store2及后续写入操作执行前，这个屏障会把Store1强制刷新到内存，保证Store1的写入操作对其它处理器可见。\n"),n("strong",[s._v("LoadStore屏障")]),s._v("：对于这样的语句Load1; LoadStore; Store2，在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。\n"),n("strong",[s._v("StoreLoad屏障")]),s._v("：对于这样的语句Store1; StoreLoad; Load2，在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。它的开销是四种屏障中最大的（冲刷写缓冲器，清空无效化队列）。在大多数处理器的实现中，这个屏障是个万能屏障，兼具其它三种内存屏障的功能")])]),s._v(" "),n("p",[s._v("对于连续多个volatile变量读或者连续多个volatile变量写，编译器做了一定的优化来提高性能，比如：")]),s._v(" "),n("blockquote",[n("p",[s._v("第一个volatile读;")]),s._v(" "),n("p",[s._v("LoadLoad屏障；")]),s._v(" "),n("p",[s._v("第二个volatile读；")]),s._v(" "),n("p",[s._v("LoadStore屏障")])]),s._v(" "),n("p",[s._v("再介绍一下volatile与普通变量的重排序规则:")]),s._v(" "),n("ol",[n("li",[s._v("如果第一个操作是volatile读，那无论第二个操作是什么，都不能重排序；")]),s._v(" "),n("li",[s._v("如果第二个操作是volatile写，那无论第一个操作是什么，都不能重排序；")]),s._v(" "),n("li",[s._v("如果第一个操作是volatile写，第二个操作是volatile读，那不能重排序。")])]),s._v(" "),n("p",[s._v("举个例子，我们在案例中step 1，是普通变量的写，step 2是volatile变量的写，那符合第2个规则，这两个steps不能重排序。而step 3是volatile变量读，step 4是普通变量读，符合第1个规则，同样不能重排序。")]),s._v(" "),n("p",[s._v("但如果是下列情况：第一个操作是普通变量读，第二个操作是volatile变量读，那是可以重排序的：")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 声明变量")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 声明普通变量")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" flag "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 声明volatile变量")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 以下两个变量的读操作是可以重排序的")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 普通变量读")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// volatile变量读")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"三、volatile的用途"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、volatile的用途"}},[s._v("#")]),s._v(" 三、volatile的用途")]),s._v(" "),n("p",[s._v("从 volatile 的内存语义上来看，volatile 可以保证内存可见性且禁止重排序。")]),s._v(" "),n("p",[s._v("在保证内存可见性这一点上，volatile 有着与锁相同的内存语义，所以可以作为一个【轻量级】的锁来使用。但由于 volatile 仅仅保证对单个 volatile 变量的读/写具有原子性，而锁可以保证整个 "),n("strong",[s._v("临界区代码")]),s._v(" 的执行具有原子性。所以 "),n("strong",[s._v("在功能上，锁比 volatile 更强大；在性能上，volatile 更有优势")]),s._v("。")]),s._v(" "),n("p",[s._v("在禁止重排序这一点上，volatile 也是非常有用的。比如我们熟悉的单例模式，其中有一种实现方式是【双重锁检查】，比如这样的代码：")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("br"),n("br"),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),s._v(" instance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不使用volatile关键字")]),s._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 双重锁检验")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("instance "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第7行")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("instance "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    instance "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第10行")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" instance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("如果这里的变量声明不使用volatile关键字，是可能会发生错误的。它可能会被重排序：")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[s._v("instance "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第10行")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 可以分解为以下三个步骤")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" memory "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("allocate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 分配内存 相当于c的malloc")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ctorInstanc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("memory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//初始化对象")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" s "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" memory "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//设置s指向刚分配的地址")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 上述三个步骤可能会被重排序为 1-3-2，也就是：")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" memory "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("allocate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 分配内存 相当于c的malloc")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" s "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("memory "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//设置s指向刚分配的地址")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ctorInstanc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("memory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//初始化对象")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("而一旦假设发生了这样的重排序，比如线程 A 在第 10 行执行了步骤 1 和步骤 3，但是步骤 2 还没有执行完。这个时候另一个线程B执行到了第 7 行，它会判定 instance 不为空，然后直接返回了一个未初始化完成的 instance！")]),s._v(" "),n("p",[s._v("所以JSR-133对volatile做了增强后，volatile的禁止重排序功能还是非常有用的。")])])}),[],!1,null,null,null);t.default=e.exports},874:function(s,t,a){s.exports=a.p+"assets/img/volatile内存示意图.e9ee4a80.jpg"},875:function(s,t,a){s.exports=a.p+"assets/img/内存屏障-16473466483002.7a8d5d17.png"}}]);