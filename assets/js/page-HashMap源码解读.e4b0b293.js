(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{1103:function(a,s,t){"use strict";t.r(s);var n=t(1),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("为了控制篇幅，只简单概括一下扩容机制，至于源码就不搬上来了，"),t("s",[a._v("写写真的很费劲")])]),a._v(" "),t("h2",{attrs:{id:"构成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构成"}},[a._v("#")]),a._v(" 构成")]),a._v(" "),t("p",[a._v("Map 使用 "),t("code",[a._v("Entry<K,V>")]),a._v(" 来记录一个键值对，HashMap中的链表节点 "),t("code",[a._v("Node<K, V>")]),a._v(" 正是继承了这个类。其中包含了key、value、hash和对下一个节点的引用next。几个节点链接在一起形成了一条链表。")]),a._v(" "),t("p",[a._v("另外还有一种树上节点 "),t("code",[a._v("TreeNode<K, V>")]),a._v(" 则是继承了 "),t("code",[a._v("Node<K, V>")]),a._v(" 。")]),a._v(" "),t("p",[a._v("HashMap 底层维护了一个数组，数组中的元素则是由以上的链表或者红黑树构成。简单理解就是节点较少时使用链表，节点较多时使用红黑树以提高查询效率。")]),a._v(" "),t("h2",{attrs:{id:"扩容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩容"}},[a._v("#")]),a._v(" 扩容")]),a._v(" "),t("p",[a._v("存放数据的数组不是固定不变的，默认的初始大小是16。")]),a._v(" "),t("p",[a._v("HashMap 中有一个默认的加载因子 0.75，通过当前的数组大小 * 加载因子能够得到一个【扩容阈值】。当键值对数量到达该阈值，HashMap 会对它的数组进行两倍扩容。")]),a._v(" "),t("h2",{attrs:{id:"添加"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加"}},[a._v("#")]),a._v(" 添加")]),a._v(" "),t("p",[a._v("往 HashMap 中添加一对映射关系，即往数组中添加一个节点。如果数组中已经存在 key，可以选择对已有的 value 进行替换或者保留；如果不存在，将创建一个新的节点加入到数组中。")]),a._v(" "),t("div",{staticClass:"custom-block info"},[t("p",{staticClass:"custom-block-title"},[a._v("替换或保留")]),a._v(" "),t("p",[a._v("此次添加的映射关系，可能在数组中已经存在了相同的key。可以根据需要，用新的value替换/覆盖原来的value；或是选择保留原来的value都行。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 如果存在key，选择替换原来的value")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("K")]),a._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),a._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("putVal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("hash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 如果存在key，选择保留原来的value")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("putIfAbsent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("K")]),a._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),a._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("putVal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("hash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])])]),a._v(" "),t("h3",{attrs:{id:"节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#节点"}},[a._v("#")]),a._v(" 节点")]),a._v(" "),t("p",[a._v("一对映射关系就是一个节点，创建之初的节点只是一个普通的链表节点。当有需要时才会转换成红黑树的节点、或者从红黑树的节点退化成链表节点。")]),a._v(" "),t("h3",{attrs:{id:"位置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位置"}},[a._v("#")]),a._v(" 位置")]),a._v(" "),t("p",[a._v("添加一对映射关系，会根据 key 计算得到一个 hash，再通过数组的大小计算一个索引表示这个节点应该存放的位置：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("index "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" hash "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("table"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("div",{staticClass:"custom-block danger"},[t("p",{staticClass:"custom-block-title"},[a._v("hash & (table.length - 1)")]),a._v(" "),t("p",[a._v("为什么是这么个算法，根据规律，当这个 length 是2的幂次的时候满足如下等式")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("hash "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v(" table"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" hash "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("table"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[t("code",[a._v("hash % table.length")]),a._v(" 其实很好理解，就是根据hash，将各种节点在数组中依次排放。但是上面的位运算在计算速度上更具优势，因此会可以保证数组的大小是2的幂次，以此来加快每个节点存放位置的计算。")])]),a._v(" "),t("h2",{attrs:{id:"删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[a._v("#")]),a._v(" 删除")]),a._v(" "),t("p",[a._v("可以从数组中删除一个节点，即删除了这对映射关系。可以选择含有 key 的映射关系，也可以选择严格相等的 key-value 键值对。")]),a._v(" "),t("h2",{attrs:{id:"链表的树化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链表的树化"}},[a._v("#")]),a._v(" 链表的树化")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("节点的添加通常添加到对应链表的末尾。当满足以下两个条件时，则会将该链表，升级成红黑树：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("数组的大小不小于64")])]),a._v(" "),t("li",[t("p",[a._v("链表中节点个数不小于8")])])])]),a._v(" "),t("li",[t("p",[a._v("当链表需要树化的时候，但碍于数组大小太小，会暂不树化，先对数组进行扩容。")])])]),a._v(" "),t("h2",{attrs:{id:"红黑树的退化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#红黑树的退化"}},[a._v("#")]),a._v(" 红黑树的退化")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("在数组扩容的时候，会对原先的所有链表和红黑树，将其中所有的节点进行重新分布。")]),a._v(" "),t("p",[a._v("因为数组大小的改变，每个 key 在数组中的索引位置也会发生变化。有些红黑树在重新分布之后，节点数量会减少，当这个数量减少到6的时候，则会将该红黑树退化成链表。")])]),a._v(" "),t("li",[t("p",[a._v("在删除红黑树中的节点的时候，当节点数量少到一定程度，也会将该红黑树退化成链表")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);